package com.qiaohu.wechat.admin.controller;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.time.DateFormatUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.github.pagehelper.Page;
import com.qiaohu.wechat.admin.BaseController;
import com.qiaohu.wechat.admin.RestResult;
import com.qiaohu.wechat.admin.auth.AuthRequired;
import com.qiaohu.wechat.admin.dto.BasePage;
import com.qiaohu.wechat.admin.service.IIndustryModelService;
import com.qiaohu.wechat.common.api.TemplateMsgAPI;
import com.qiaohu.wechat.common.api.response.AddTemplateResponse;
import com.qiaohu.wechat.common.api.response.PrivateTemplate;
import com.qiaohu.wechat.common.utils.CheckUtils;
import com.qiaohu.wechat.common.utils.DateUtils;
import com.qiaohu.wechat.constants.Constants;
import com.qiaohu.wechat.core.config.ApiConfig;
import com.qiaohu.wechat.core.entity.WxTemplate;
import com.qiaohu.wechat.core.entity.extend.WxTemplateExt;
import com.qiaohu.wechat.core.exception.AppException;

@RestController
@RequestMapping("/industrymodel")
public class IndustryModelController extends BaseController {
	
	
	@Autowired
	private IIndustryModelService  industryModelService;
	
	private String user;
	@AuthRequired(permission = "wx.industrymodel.list")
	@RequestMapping(value = "/list", method = RequestMethod.POST)
	public RestResult list(@RequestBody WxTemplateExt para) {
		
		// 开始时间和结束时间比较
		if(!CheckUtils.isNull(para.getEndDate())){
			long et = para.getEndDate().getTime();
			para.setEndDate(DateUtils.parse(
					DateFormatUtils.format(new Date(et), "yyyy-MM-dd 23:59:59"),
					DateUtils.YMDHHMMSS));
		}
		if(!CheckUtils.isNull(para.getStartDate())){
			long st = para.getStartDate().getTime();
			para.setStartDate(DateUtils.parse(
					DateFormatUtils.format(new Date(st), "yyyy-MM-dd 00:00:00"),
					DateUtils.YMDHHMMSS));
		}
		if (!CheckUtils.isNull(para.getEndDate())
				&& !CheckUtils.isNull(para.getStartDate())) {
			if (!DateUtils.comparable(para.getStartDate(),
					para.getEndDate())) {
				return new RestResult(messageHelper.mesg_info_0019);
			}
		}
				
		user = getAdminId();
		Page<WxTemplate> list = null;
		try {
			// 返回查询结果
			list = industryModelService.search(para);

			if (CheckUtils.isNullOrEmpty(list.getResult())
					&& para.getPage() > 0) {
				para.setPage(0);
				list = industryModelService.search(para);
			}
			return new RestResult(new BasePage(list.getTotal(),
					list.getResult()));
		} catch (AppException e) {
			// 返回异常信息
			return new RestResult(e.getMessage());
		}
	}
	
	@AuthRequired(permission = "wx.industrymodel.create")
	@RequestMapping(value = "/create", method = RequestMethod.POST)
	public RestResult create(@RequestBody WxTemplateExt para) {
		
		//创建时间
		Timestamp tt = DateUtils.getNowTimestamp();
		//创建者
		String aid = getAdminId();
		String templateId = null;
		
		try{
			//获取到token
			String accessToken = ApiConfig.getInstance().getAccessToken();
			if (CheckUtils.isNullOrEmpty(accessToken)) {
				return new RestResult(messageHelper.mesg_error_0001);
			}
			//获取到模板API
			TemplateMsgAPI templateMsgAPI = new TemplateMsgAPI(accessToken);
			//设置行业--只需要执行一次就好
			/*Industry industry = new Industry();
			industry.setIndustryId1("1");
			industry.setIndustryId2("2");
			templateMsgAPI.setIndustry(industry);*/
			AddTemplateResponse addRes = templateMsgAPI.addTemplate(para.getTemplateIdShort());
			
			if(!"0".equals(addRes.getErrcode())){
				//当errorcode不等于0的时候return massage
				return new RestResult(messageHelper.mesg_error_0001);
			}
			//获取模板ID
			templateId = addRes.getTemplateId();
			//获取到所有模板
			PrivateTemplate[] allTemplate =templateMsgAPI.getAllPrivateTemplate();
			
			for (int i = 0; i < allTemplate.length; i++) {
				
				if(templateId.equals(allTemplate[i].getTemplateId())){
					para.setContent(allTemplate[i].getContent());
					para.setCreateDate(tt);
					para.setCreateUser(aid);
					para.setModifyDate(tt);
					para.setModifyUser(aid);
					para.setDeputyIndustry(allTemplate[i].getDeputyIndustry());
					para.setExample(allTemplate[i].getExample());
					para.setPrimaryIndustry(allTemplate[i].getPrimaryIndustry());
					para.setStatus("1");
					para.setTemplateId(templateId);
					para.setTitle(allTemplate[i].getTitle());
					
				}
			}
			if(!CheckUtils.isNullOrEmpty(para.getContent())){
				para.setContent(para.getContent().replace("\n\n", "\n"));
			}
			int ret = industryModelService.insert(para);
			
			if (ret <= Constants.SUCCESS) {
				throw new AppException(messageHelper.mesg_info_0004);
			}
			
			return new RestResult(Constants.SUCCESS,
					messageHelper.mesg_info_0001);
			
		}catch(AppException e){
			return  new RestResult(e.getMessage());
		}
		 
	}
	
	@RequestMapping(value = "/sync", method = RequestMethod.POST)
	public RestResult sync() {
		
		try {
			//获取到token
			String accessToken = ApiConfig.getInstance().getAccessToken();
			if (CheckUtils.isNullOrEmpty(accessToken)) {
				return new RestResult(messageHelper.mesg_error_0001);
			}
			//获取到模板API
			TemplateMsgAPI templateMsgAPI = new TemplateMsgAPI(accessToken);
			//获取所有的模板
			PrivateTemplate[] allTemplate = templateMsgAPI.getAllPrivateTemplate();
			//获取数据库所有
			List<WxTemplate> templates= industryModelService.selectAll();
			List<WxTemplate> newList = new ArrayList<WxTemplate>();
			//如果微信库中没有模板
			if(allTemplate.length==0&&!CheckUtils.isNullOrEmpty(templates)){
				return new RestResult(messageHelper.mesg_error_0001);	
			}
			
			for (int i = 0; i < allTemplate.length; i++) {
				//数据库有的就更新
				WxTemplate template =industryModelService.findByTemplateId(allTemplate[i].getTemplateId());
				if(!CheckUtils.isNull(template)){
					template.setContent(allTemplate[i].getContent());
					/*template.setCreateDate(tt);
					template.setCreateUser(aid);*/
					template.setModifyDate(DateUtils.getNowTimestamp());
					template.setModifyUser(user);
					template.setDeputyIndustry(allTemplate[i].getDeputyIndustry());
					template.setExample(allTemplate[i].getExample());
					template.setPrimaryIndustry(allTemplate[i].getPrimaryIndustry());
					template.setStatus("1");
					template.setTitle(allTemplate[i].getTitle());
					
						newList.add(template);
					
				}else{//没有的就插入
					
					WxTemplate newTemplate = new WxTemplate();
					newTemplate.setContent(allTemplate[i].getContent());
					newTemplate.setCreateDate(DateUtils.getNowTimestamp());
					newTemplate.setCreateUser(user);
					newTemplate.setModifyDate(DateUtils.getNowTimestamp());
					newTemplate.setModifyUser(user);
					newTemplate.setDeputyIndustry(allTemplate[i].getDeputyIndustry());
					newTemplate.setExample(allTemplate[i].getExample());
					newTemplate.setPrimaryIndustry(allTemplate[i].getPrimaryIndustry());
					newTemplate.setStatus("1");
					newTemplate.setTemplateId(allTemplate[i].getTemplateId());
					newTemplate.setTitle(allTemplate[i].getTitle());
					
						newList.add(newTemplate);
					
				}			
			}
			
			if(!CheckUtils.isNullOrEmpty(newList)){
				//删除所有
				industryModelService.deleteAll();
				for (int i = 0; i < newList.size(); i++) {
					int ret = industryModelService.insert(newList.get(i));
					if(ret<=Constants.SUCCESS){
						throw new AppException(messageHelper.mesg_info_0021);
					}
				}
				
			}
			// 返回查询结果
			
			return new RestResult(Constants.SUCCESS,
					messageHelper.mesg_info_0022);
		} catch (AppException e) {
			// 返回异常信息
			return new RestResult(e.getMessage());
		}
	}
	
	
	@AuthRequired(permission = "wx.industrymodel.update")
	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public RestResult update(@RequestBody WxTemplateExt para) {
		
		// 模板编号
		if (!CheckUtils.checkPara(para.getTemplateIdShort(), 50)) {
			return new RestResult(messageHelper.mesg_info_1401);
		}
		// 消息名称
		if (!CheckUtils.checkPara(para.getMessageName(), 50)) {
			return new RestResult(messageHelper.mesg_info_1402);
		}
		//文件名称
		if (!CheckUtils.checkPara(para.getFileName(), 50)) {
			return new RestResult(messageHelper.mesg_info_1403);
		}
		try {
			 //去除名称两端的空格
			 if(!CheckUtils.isNullOrEmpty(para.getFileName())){
				 para.setFileName(para.getFileName().trim());
			 }
			 
			 industryModelService.update(para);
			 return new RestResult(Constants.SUCCESS,
						messageHelper.mesg_info_0003);
		} catch (AppException e) {
			return new RestResult(e.getMessage());
		}
	}
	
	@RequestMapping(value = "/detail", method = RequestMethod.GET)
	public RestResult detail(String id) {
		WxTemplate template= null;
		try{
			template = industryModelService.detail(id);
			if (CheckUtils.isNull(template)) {
				return new RestResult(messageHelper.mesg_info_0007);
			}
			
			return new RestResult(template);
		}catch(AppException e){
			return new RestResult(e.getMessage());
		}	
	}
	
	@AuthRequired(permission = "wx.keyword.delete")
	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	public RestResult delete(@RequestBody WxTemplateExt template) {
		try {
			int ret = industryModelService.delete(template);
			if (ret > Constants.SUCCESS) {
				return new RestResult(Constants.SUCCESS,
						messageHelper.mesg_info_0002);
			} else {
				return new RestResult(messageHelper.mesg_info_0006);
			}

		} catch (AppException e) {
			return new RestResult(e.getMessage());
		}
		
	}

}
