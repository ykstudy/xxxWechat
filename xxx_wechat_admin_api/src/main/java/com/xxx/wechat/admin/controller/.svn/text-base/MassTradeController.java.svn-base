package com.qiaohu.wechat.admin.controller;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.github.pagehelper.Page;
import com.qiaohu.wechat.admin.BaseController;
import com.qiaohu.wechat.admin.RestResult;
import com.qiaohu.wechat.admin.auth.AuthRequired;
import com.qiaohu.wechat.admin.dto.BasePage;
import com.qiaohu.wechat.common.utils.CheckUtils;
import com.qiaohu.wechat.common.utils.DateUtils;
import com.qiaohu.wechat.constants.Constants;
import com.qiaohu.wechat.core.entity.MassTrade;
import com.qiaohu.wechat.core.entity.extend.MassTradeExt;
import com.qiaohu.wechat.core.exception.AppException;
import com.qiaohu.wechat.core.service.IMassTradeService;

/**
 * 主题商品自动化推送控制器
 * @author yangk
 *
 */
@RestController
@RequestMapping("/subjectGoods")
public class MassTradeController extends BaseController{
	private static Logger logger = LoggerFactory.getLogger(MassTradeController.class);
	
	@Autowired
	IMassTradeService massTradeService;
	
	/**
	 * 主题商品信息集合
	 * @param massSendExt
	 * @return
	 */
	@AuthRequired(permission = "wx.subjectgoods.list")
	@RequestMapping(value = "list", method = RequestMethod.POST)
	public RestResult list(@RequestBody MassTradeExt massSendExt) {
		Page<MassTrade> page = null;
		try {
			// 查询主题商品信息集合
			page = (Page<MassTrade>)massTradeService.search(massSendExt);
			// 返回主题商品信息集合
			if (CheckUtils.isNull(page))
				return null;
			return new RestResult(new BasePage(page.getTotal(),	page.getResult()));
		} catch (AppException e) {
			logger.error(e.getMessage(), e);
			// 返回异常信息
			return new RestResult(messageHelper.mesg_error_0001);
		}
	}
	
	/**
	 * 主题商品信息添加
	 * @param massSendExt
	 * @return
	 */
	@AuthRequired(permission = "wx.subjectgoods.create")
	@RequestMapping(value = "/create", method = RequestMethod.POST)
	public RestResult create(@RequestBody MassTradeExt massTradeExt) {
		if(noMassTrade(massTradeExt)) {
			try {
				// 添加作成者
				String createUser = getAdminId();
				massTradeExt.setCreateUser(createUser);
				// 添加作成时间
				massTradeExt.setCreateDate(DateUtils.getCreateDate(DateUtils.getNowTimestamp()));
				//判断推送批次，并且设置默认的间隔天数
				//一推：2天   二至五推：7天
				if(massTradeExt.getSendCount()==1) {
					massTradeExt.setSpaceDay(2);
				}else {
					massTradeExt.setSpaceDay(7);
				}
				
				
				// 添加主题商品信息
				if (massTradeService.addMassTrade(massTradeExt) == 1) {
					// 返回添加成功信息
					return new RestResult(Constants.SUCCESS,messageHelper.mesg_info_0001);
				} else {
					// 返回添加失败信息
					return new RestResult(messageHelper.mesg_error_0001);
				}
			} catch (AppException e) {
				logger.error(e.getMessage(), e);
				// 返回异常信息
				return new RestResult(messageHelper.mesg_error_0001);
			}
		} else {
			// 返回异常信息
			return new RestResult(messageHelper.mesg_error_0005);
		}
		
	}
	
	/**
	 * 主题商品信息删除
	 * @param massTradeExt
	 * @return
	 */
	@AuthRequired(permission = "wx.subjectgoods.delete")
	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	public RestResult delete(@RequestBody MassTradeExt massTradeExt) {
		try {
			// 删除主题商品信息
			if (massTradeService.deleteMassTrade(massTradeExt) == 1) {
				// 返回删除成功信息
				return new RestResult(Constants.SUCCESS,messageHelper.mesg_info_0002);
			} else {
				// 返回删除失败信息
				return new RestResult(messageHelper.mesg_error_0001);
			}
		} catch (AppException e) {
			logger.error(e.getMessage(), e);
			return new RestResult(messageHelper.mesg_error_0001);
		}
		
		
	}
	
	/**
	 * 主题商品信息更新
	 * @param massTradeExt
	 * @return
	 */
	@AuthRequired(permission = "wx.subjectgoods.update")
	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public RestResult update(@RequestBody MassTradeExt massTradeExt) {
		if(noMassTrade(massTradeExt)) {
			try {
				// 修改主题商品信息
				if (massTradeService.updateMassTrade(massTradeExt) == 1) {
					// 返回修改成功信息
					return new RestResult(Constants.SUCCESS,messageHelper.mesg_info_0003);
				} else {
					// 返回修改失败信息
					return new RestResult(messageHelper.mesg_error_0001);
				}
			} catch (AppException e) {
				logger.error(e.getMessage(), e);
				return new RestResult(messageHelper.mesg_error_0001);
			}
		} else {
			// 返回异常信息
			return new RestResult(messageHelper.mesg_error_0005);
		}
	}
	
	/**
	 * 主题商品信息详情
	 * @param id
	 * @return
	 */
	@AuthRequired(permission = "wx.subjectgoods.list")
	@RequestMapping(value = "/detail", method = RequestMethod.GET)
	public RestResult detail(int id) {
		try {
			// 查询主题商品信息
			MassTrade massTrade = massTradeService.getMassTrade(id);
			// 返回主题商品信息
			if (CheckUtils.isNull(massTrade))
				return new RestResult(messageHelper.mesg_error_0001);
			return new RestResult(massTrade);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			// 返回异常信息
			return new RestResult(messageHelper.mesg_error_0001);
		}
	}
	
	@RequestMapping(value = "/updateSectionDay", method = RequestMethod.GET)
	public RestResult updateSpaceDay(String sendCount,String spaceDay) {
		try {
			//获取到要更新的对应数据
			// 查询主题商品信息
			MassTrade massTrade = new MassTrade();
			massTrade.setSendCount(Integer.parseInt(sendCount));
			massTrade.setSpaceDay(Integer.parseInt(spaceDay));
			int result =massTradeService.updateMassTradeBySendCount(massTrade);
			
			if(result>0) {
				return new RestResult(Constants.SUCCESS,messageHelper.mesg_info_0003);
			}else {
				return new RestResult(messageHelper.mesg_error_0001);
			}
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			// 返回异常信息
			return new RestResult(messageHelper.mesg_error_0001);
		}
	}
	/**
	 * 根据版本号月号判断是否存在主题商品
	 * 
	 * @param prodGrName
	 * @param prodId
	 * @return
	 */
	private boolean noMassTrade(MassTradeExt massTradeExt) {
		Page<MassTrade> page = massTradeService.search(massTradeExt);
		if (0 == page.size()) {
			return true;
		} else if (1 == page.size()) {
			if (massTradeExt.getId() == page.get(0).getId()) {
				return true;
			}
		}
		return false;
	}
}
