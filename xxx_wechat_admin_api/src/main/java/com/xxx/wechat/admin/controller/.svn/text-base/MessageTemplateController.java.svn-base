package com.qiaohu.wechat.admin.controller;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.qiaohu.wechat.admin.BaseController;
import com.qiaohu.wechat.admin.RestResult;
import com.qiaohu.wechat.admin.auth.AuthRequired;
import com.qiaohu.wechat.common.utils.CheckUtils;
import com.qiaohu.wechat.core.constants.ConfigConstants;
import com.qiaohu.wechat.core.constants.Constants;
import com.qiaohu.wechat.core.entity.MessageTemplate;
import com.qiaohu.wechat.core.entity.RecommendNumAdvice;
import com.qiaohu.wechat.core.service.IMessageTemplateService;

@RestController
@RequestMapping("/messageTemplate")
public class MessageTemplateController extends BaseController {

	@Autowired
	private IMessageTemplateService messageTemplateService;

	/**
	 * @Description: 活动参与成功通知内容保存(包含将要完成模板以及将要结束模板)
	 */
	@AuthRequired(permission = "wx.messageTemplate.create")
	@RequestMapping(value = "/create", method = RequestMethod.POST)
	public RestResult create(@RequestBody MessageTemplate messt) {
		String msg = null;
		// 如果返回数据，代表校验失败
		if ((msg = checkParam(messt)) != null) {
			return new RestResult(msg);
		}
		int line = 0;
		// 如果type为1，则插入或者修改活动将要完成通知
		if (Constants.ACTIVITY_CONTENT_TYPE_COMPLETED.equals(messt.getContentType())) {
			// 如果有数据修改，没有增加
			line = messageTemplateService.saveOrUpdateActivityCompleted(messt);
		} else if (Constants.ACTIVITY_CONTENT_TYPE_END.equals(messt.getContentType())) {
			// 如果type为2，则插入或者修改活动即将结束通知
			// 如果有数据修改，没有增加
			line = messageTemplateService.saveOrUpdateActivityEnd(messt);
		}
		// 如果不是设定数量代表插入或者修改不完整
		if (line < ConfigConstants.RCMD_NUM_ATTEND_ACTIVITY_IN_THE_TABLE) {
			// 如果插入失败提示用户
			logger.info("AttendActivityCompleted : Incompleteness of data insertion !!!!!");
			return new RestResult(messageHelper.mesg_info_0004);
		}
		return new RestResult(com.qiaohu.wechat.constants.Constants.SUCCESS, messageHelper.mesg_info_0001);
	}
	
	/**
	 * @Description: 查询模板数据,返回数据数组 0位置为 即将完成内容，1为即将结束内容
	 * @return 返回模板数据
	 */
	@AuthRequired(permission = "wx.messageTemplate.create")
	@RequestMapping(value = "/query", method = RequestMethod.POST)
	public RestResult query() {
		MessageTemplate messtCompleted = 
				messageTemplateService.selectActivityCompletedOrEnd(Constants.ACTIVITY_CONTENT_TYPE_COMPLETED);
		MessageTemplate messtEnd = 
				messageTemplateService.selectActivityCompletedOrEnd(Constants.ACTIVITY_CONTENT_TYPE_END);
		RecommendNumAdvice rcmd = 
				messageTemplateService.selectRcmdNumAdvice();
		return new RestResult(new Object[]{messtCompleted, messtEnd, rcmd});
	}

	/**
	 * 校验模板参数是否合格
	 * 
	 * @param messt
	 *            校验模板对象
	 * @return 如果通过返回null,否则返回错误信息
	 */
	private String checkParam(MessageTemplate messt) {
		String msg = null;
		// 校验url地址，并长度不超过200
		if (!CheckUtils.checkPara(messt.getDescriptionUrl(), CheckUtils.HTTP, 200)) {
			msg = messageHelper.mesg_info_1501;
		}
		// 非空校验头部说明，并长度不超过200
		if (!CheckUtils.checkPara(messt.getFirst(), 200)) {
			msg = messageHelper.mesg_info_1502;
		}
		// 非空校验keyword1，并长度不超过100
		if (!CheckUtils.checkPara(messt.getKeyword1(), 100)) {
			msg = messageHelper.mesg_info_1606 + 1;
		}
		// 时间非空判断
		if (!CheckUtils.checkPara(messt.getKeyword2(), 100)) {
			msg = messageHelper.mesg_info_1606 + 2;
		}
		// 地点非空判断
		if (!CheckUtils.checkPara(messt.getKeyword3(), 100)) {
			msg = messageHelper.mesg_info_1606 + 3;
		}
		// 非空校验keyword2，yyyy-MM-dd 时间不可小于当前时间
//		try {
//			// 获取时间格式
//			String dateFormat = SysConfig.getInstance().getProperty(ConfigConstants.ATTEND_ACTIVITY_DATE_FORMART);
//			Date checkDate = new SimpleDateFormat(dateFormat).parse(messt.getKeyword2());
//			if (!CheckUtils.checkPara(messt.getKeyword2(), 100) && checkLTCurrentDate(checkDate)) {
//				msg = messageHelper.mesg_info_1606 + 2;
//			}
//		} catch (ParseException e) {
//			// 时间格式异常
//			msg = messageHelper.mesg_info_1606 + 2;
//			logger.info(msg);
//			logger.info(e.getMessage(), e);
//		}
		// 非空校验尾部说明，并长度不超过200
		if (!CheckUtils.checkPara(messt.getRemark(), 200)) {
			msg = messageHelper.mesg_info_1503;
		}
		// 类型非空，非法校验
		if (StringUtils.isBlank(messt.getContentType())
				// 在不等于类型一或者类型二时验证失败
				|| !(Constants.ACTIVITY_CONTENT_TYPE_COMPLETED.equals(messt.getContentType())
						|| Constants.ACTIVITY_CONTENT_TYPE_END.equals(messt.getContentType()))) {
			msg = messageHelper.mesg_error_0001;
			// 有人试图模拟请求
			logger.info("some one Try to simulate a request");
		}
		return msg;
	}

	/**
	 * @Description: 判断是否小于当前日期，精确到日。不算时分秒
	 * @param date
	 * @return 小于返回true
	 */
//	private boolean checkLTCurrentDate(Date date) {
//		long daySecond = 60 * 60 * 24;// 一天的秒数
//		long checkTime = date.getTime() / 1000;// 判断的时间秒数
//		long nowTime = System.currentTimeMillis() / 1000;// 当前秒数
//		long dayCheckTime = checkTime - checkTime % daySecond;// 因为是东八区，计算出早上8点秒数
//		long dayNowTime = nowTime - nowTime % daySecond;// 因为是东八区，计算出早上8点秒数
//		return dayCheckTime < dayNowTime;
//	}

}
