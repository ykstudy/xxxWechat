package com.qiaohu.wechat.admin.controller;

import java.sql.Timestamp;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.github.pagehelper.Page;
import com.qiaohu.wechat.admin.BaseController;
import com.qiaohu.wechat.admin.RestResult;
import com.qiaohu.wechat.admin.auth.AuthRequired;
import com.qiaohu.wechat.admin.dto.BasePage;
import com.qiaohu.wechat.common.utils.CheckUtils;
import com.qiaohu.wechat.common.utils.DateUtils;
import com.qiaohu.wechat.constants.Constants;
import com.qiaohu.wechat.core.entity.UrlSetting;
import com.qiaohu.wechat.core.entity.extend.UrlSettingExt;
import com.qiaohu.wechat.core.exception.AppException;
import com.qiaohu.wechat.core.service.IUrlService;

@RestController
@RequestMapping("/url")
public class UrlController extends BaseController {

	@Autowired
	private IUrlService urlSerivce;

	/*
	 * 一览数据取得 selectAll
	 */
	@AuthRequired(permission = "wx.url.list")
	@RequestMapping(value = "/list", method = RequestMethod.POST)
	public RestResult list(@RequestBody UrlSettingExt req) {
		try {
			// 分页
			Page<UrlSetting> list = urlSerivce.search(req);
			// 返回connt和Result
			return new RestResult(new BasePage(list.getTotal(),
					list.getResult()));
		} catch (AppException e) {
			logger.error(e.getMessage(), e);
			// 返回异常信息
			return new RestResult(e.getMessage());
		}

	}

	/*
	 * 数据更新 对象更新
	 */
	@AuthRequired(permission = "wx.url.update")
	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public RestResult update(@RequestBody UrlSetting url) {
		// 参数检查
		// 检查URL地址格式是否正确
		if (!CheckUtils.checkPara(url.getUrlValue(), CheckUtils.HTTP, 128)) {
			return new RestResult(messageHelper.mesg_info_1201);
		}

		// 检查备注长度
		if (!CheckUtils.checkPara(url.getMemo(), 50)) {
			return new RestResult(messageHelper.mesg_info_1202);
		}
		Timestamp tt = DateUtils.getNowTimestamp();
		try {
			// 获取当前用户名
			String aid = getAdminId();
			// 新建更新用户名
			url.setModifyUser(aid);
			// 不为空数据假造
			url.setModifyDate(tt);

			// 更新方法

			int ret = urlSerivce.update(url);
			if (ret > Constants.SUCCESS) {
				return new RestResult(Constants.SUCCESS,
						messageHelper.mesg_info_0003);
			} else {
				return new RestResult(messageHelper.mesg_info_0005);
			}

		} catch (AppException e) {
			logger.error(e.getMessage(), e);
			// 返回异常信息
			return new RestResult(e.getMessage());
		}
	}

	/*
	 * 取得详情 入力值对象 主键取得 Ok
	 */
	@RequestMapping(value = "/detail", method = RequestMethod.GET)
	public RestResult detail(String id) {
		try {
			// 根据Id查询对象返回
			return new RestResult(urlSerivce.detail(id));
		} catch (AppException e) {
			logger.error(e.getMessage(), e);
			// 返回异常信息
			return new RestResult(e.getMessage());
		}
	}

	/*
	 * 删除 入力值对象 主键删除
	 */
	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	public RestResult delete(@RequestBody UrlSetting url) {
		try {

			int ret = urlSerivce.delete(url);

			if (ret > Constants.SUCCESS) {
				return new RestResult(Constants.SUCCESS,
						messageHelper.mesg_info_0002);
			} else {
				return new RestResult(messageHelper.mesg_info_0006);
			}

		} catch (AppException e) {
			logger.error(e.getMessage(), e);
			// 返回异常信息
			return new RestResult(e.getMessage());
		}
	}

}
