package com.qiaohu.wechat.admin.service.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.qiaohu.wechat.admin.service.IReportService;
import com.qiaohu.wechat.common.utils.CheckUtils;
import com.qiaohu.wechat.constants.Constants;
import com.qiaohu.wechat.core.dao.ReportDao;
import com.qiaohu.wechat.core.dao.StatisticalDataDao;
import com.qiaohu.wechat.core.entity.StatisticalData;
import com.qiaohu.wechat.core.entity.extend.Report;
import com.qiaohu.wechat.core.entity.extend.ReportExt;
import com.qiaohu.wechat.core.exception.AppException;

import tk.mybatis.mapper.entity.Example;
import tk.mybatis.mapper.entity.Example.Criteria;

@Service("reporService")
public class ReportServiceImpl implements IReportService {

	@Autowired
	private ReportDao reportDao;
	
	@Autowired
	private StatisticalDataDao sdDao;
	
	@Override
	@Transactional
	public ReportExt receptionTimelist(ReportExt reportExt) throws AppException {
		ReportExt ret = null;
		int allCount = 0;
		List<Report> reports = null;
		try {
			// 查询总件数
			allCount = reportDao.selectMinutesCount(reportExt);
			if (allCount < Constants.ONE) {
				return null;
			}
			reportExt.setPageCount(reportExt.getCount());
			reports = reportDao.selectMinutes(reportExt);
			if (CheckUtils.isNullOrEmpty(reports)) {
				return null;
			}
			
			ret = reportDao.selectMinutesStatistics(reportExt);
			if (CheckUtils.isNull(ret)) {
				return null;
			}
	
			ret.setPage(reportExt.getPage());
		} catch (Exception e) {
			throw new AppException(e);
		}

		ret.setCount(allCount);
		ret.setList(reports);

		return ret;
	}

	@Override
	@Transactional
	public ReportExt usedTimesList(ReportExt reportExt) throws AppException {
		ReportExt ret = null;
		int allCount = 0;
		List<Report> reports = null;
		try {
			// 查询总件数
			allCount = reportDao.selectTimesCount(reportExt);
			if (allCount < Constants.ONE) {
				return null;
			}
			reportExt.setPageCount(reportExt.getCount());
			reports = reportDao.selectTimes(reportExt);
			if (CheckUtils.isNullOrEmpty(reports)) {
				return null;
			}
	
			ret = reportDao.selectTimesStatistics(reportExt);
			if (CheckUtils.isNull(ret)) {
				return null;
			}

			ret.setPage(reportExt.getPage());
		} catch (Exception e) {
			throw new AppException(e);
		}

		ret.setCount(allCount);
		ret.setList(reports);

		return ret;
	}

	@Override
	public Page<StatisticalData> search(ReportExt reportExt) throws AppException {
		// 查询条件做成
		Example example = new Example(StatisticalData.class);
		Criteria criteria = example.createCriteria();
		// 根据开始、结束时间查询
		if (!CheckUtils.isNull(reportExt.getStartDate())) {
			criteria.andGreaterThanOrEqualTo("sendTime",
					reportExt.getStartDate());
		}
		if (!CheckUtils.isNull(reportExt.getEndDate())) {
			criteria.andLessThanOrEqualTo("sendTime", reportExt.getEndDate());
		}
		
		// 排序
		example.setOrderByClause("SEND_TIME DESC");
		// 根据条件查询角色
		try {
			// 分页查询
			PageHelper.startPage(reportExt.getPage(), reportExt.getCount());
			// 查询方法
			return (Page<StatisticalData>) sdDao.selectByExample(example);
		} catch (Exception e) {
			// 异常信息
			throw new AppException(e);
		}		
	}


	/*@Override
	public List<StatisticalData> selectStatisticalDataAll(ReportExt reportExt) throws AppException {
		try {
			// 查询方法
			return sdDao.selectStatisticalDataAll(reportExt);
		} catch (Exception e) {
			// 异常信息
			throw new AppException(e);
		}	
	}*/

}
