package com.qiaohu.wechat.admin.service.impl;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;


import tk.mybatis.mapper.entity.Example;
import tk.mybatis.mapper.entity.Example.Criteria;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.qiaohu.wechat.admin.service.IUserService;
import com.qiaohu.wechat.common.utils.CheckUtils;
import com.qiaohu.wechat.common.utils.DateUtils;
import com.qiaohu.wechat.core.constants.Constants;
import com.qiaohu.wechat.core.dao.UserDao;
import com.qiaohu.wechat.core.dao.UserWeiXinLabelDao;
import com.qiaohu.wechat.core.entity.User;
import com.qiaohu.wechat.core.entity.UserWeiXin;
import com.qiaohu.wechat.core.entity.UserWeiXinlabel;
import com.qiaohu.wechat.core.entity.extend.PdCsvDataExt;
import com.qiaohu.wechat.core.entity.extend.QrCsvDataExt;
import com.qiaohu.wechat.core.entity.extend.ReportExt;
import com.qiaohu.wechat.core.entity.extend.UdCsvDataExt;
import com.qiaohu.wechat.core.entity.extend.UserStatusExcelDataExt;
import com.qiaohu.wechat.core.entity.extend.UserWeiXinExt;
import com.qiaohu.wechat.core.entity.extend.UserWxCsv;
import com.qiaohu.wechat.core.exception.AppException;
import com.qiaohu.wechat.helper.MessageHelper;

@Service
public class UserServiceImpl implements IUserService {
	
	private static final Logger logger = LoggerFactory
			.getLogger(UserServiceImpl.class);
	
	@Autowired
	UserDao userDao;
	
	@Autowired
	UserWeiXinLabelDao  userWeiXinLabelDao;
	
	@Autowired
	private MessageHelper messageHelper;
	
	@Override
	public Page<UserWeiXin> search(UserWeiXinExt userWeiXinExt) throws AppException {
		// 查询条件做成
		
		Example example = new Example(UserWeiXin.class);
		Criteria criteria = example.createCriteria();
		// 根据nickName查询
		if (!CheckUtils.isNullOrEmpty(userWeiXinExt.getWebId())) {
			criteria.andLike("webId", "%" + userWeiXinExt.getWebId() + "%");
		}
		// 根据nickName查询
		if (!CheckUtils.isNullOrEmpty(userWeiXinExt.getUcode())) {
			criteria.andLike("ucode", "%" + userWeiXinExt.getUcode() + "%");
		}
		// 根据nickName查询
		//modify params for nickname  start at  2017/08/08 by bob
		if (!CheckUtils.isNullOrEmpty(userWeiXinExt.getNickname())) {
			criteria.andLike("nickname", "%" + userWeiXinExt.getNickname() + "%");
		}
		//modify params for nickname  end at  2017/08/08 by bob
		// 根据sex查询
		if (!CheckUtils.isNullOrEmpty(userWeiXinExt.getSex())) {
			criteria.andEqualTo("sex", userWeiXinExt.getSex());
		}
		// 根据deleteFlag查询
		if (!CheckUtils.isNullOrEmpty(userWeiXinExt.getDeleteFlag())) {
			criteria.andEqualTo("deleteFlag", userWeiXinExt.getDeleteFlag());
		}

		// 根据userStatus查询
		if (!CheckUtils.isNullOrEmpty(userWeiXinExt.getUserStatus())) {
			criteria.andEqualTo("userStatus", userWeiXinExt.getUserStatus());
		}

		// 根据开始、结束时间查询
		if (!CheckUtils.isNull(userWeiXinExt.getStartTime())) {
			criteria.andGreaterThanOrEqualTo("createDate",
					userWeiXinExt.getStartTime());
		}
		if (!CheckUtils.isNull(userWeiXinExt.getEndTime())) {
			criteria.andLessThanOrEqualTo("createDate", userWeiXinExt.getEndTime());
		}
		
		// 根据applyQr查询
		if (!CheckUtils.isNullOrEmpty(userWeiXinExt.getApplyQR())) {
			criteria.andEqualTo("applyQR", userWeiXinExt.getApplyQR());
		}
				
		// 排序
		example.setOrderByClause(" DELETE_FLAG asc, MODIFY_DATE DESC");
		// 根据条件查询角色
		try {
			// 分页查询
			PageHelper.startPage(userWeiXinExt.getPage(), userWeiXinExt.getCount());
			// 查询方法
			return (Page<UserWeiXin>) userDao.selectByExample(example);
		} catch (Exception e) {
			// 异常信息
			throw new AppException(e);
		}
	}
	
	/**
	 * 特定用户一览
	 */
	@Override
	public UserWeiXinExt selectByWebIdAndUcode(UserWeiXinExt userWeiXinExt) throws AppException {
		
		try {
			
			UserWeiXin user = userDao.selectByWebIdAndUcode(userWeiXinExt);
			UserWeiXinExt result = new UserWeiXinExt();
				if(!CheckUtils.isNull(user)){
					result.setRegistFlag("1");
					result.setApplyQR(user.getApplyQR());
					result.setOpenId(user.getOpenId());
					result.setWebId(user.getWebId());
					result.setNickname(user.getNickname());
					result.setNicknameExt(user.getNicknameExt());
					result.setUcode(user.getUcode());
					result.setSex(user.getSex());
					result.setCity(user.getCity());
					result.setCountry(user.getCountry());
					result.setProvince(user.getProvince());
					result.setDeleteFlag(user.getDeleteFlag());
					result.setCreateDate(user.getCreateDate());
					result.setOrderTimes(user.getOrderTimes());
					result.setBirthdayMouth(user.getBirthdayMouth());
					result.setOrderDate(user.getOrderDate());
					result.setUserStatus(user.getUserStatus());
				}
			// 查询方法
			return result;
		} catch (Exception e) {
			// 异常信息
			throw new AppException(e);
		}
	}

	

	@Override
	public UserWeiXinExt detail(String id) throws AppException {
		try {
			UserWeiXin user =userDao.selectByPrimaryKey(id);
			UserWeiXinExt result = new UserWeiXinExt();
			UserWeiXinlabel userWeiXinLabel =userWeiXinLabelDao.selectByPrimaryKey(user.getOpenId());
			if(!CheckUtils.isNull(user)){
				//判断登录
				if(!CheckUtils.isNull(userWeiXinLabel)){
					result.setRegistFlag(userWeiXinLabel.getRegistFlag());
				}else{
					if(CheckUtils.isNullOrEmpty(user.getWebId())&&CheckUtils.isNullOrEmpty(user.getUcode())){
						result.setRegistFlag("0");
					}else{
						result.setRegistFlag("1");
					}
					
					
				}
				
				result.setApplyQR(user.getApplyQR());
				result.setOpenId(user.getOpenId());
				result.setWebId(user.getWebId());
				result.setNicknameExt(user.getNicknameExt());
				result.setNickname(user.getNickname());
				result.setUcode(user.getUcode());
				result.setSex(user.getSex());
				result.setCity(user.getCity());
				result.setCountry(user.getCountry());
				result.setProvince(user.getProvince());
				result.setDeleteFlag(user.getDeleteFlag());
				result.setCreateDate(user.getCreateDate());
				result.setOrderTimes(user.getOrderTimes());
				result.setBirthdayMouth(user.getBirthdayMouth());
				result.setOrderDate(user.getOrderDate());
				result.setUserStatus(user.getUserStatus());
			}
			// 查询方法
			return result;
		} catch (Exception e) {
			// 异常信息
			throw new AppException(e);
		}
	}

	@Override
	public UserWeiXin searchDetail(UserWeiXinExt userWeiXinExt) {
		// 查询条件做成
		Example example = new Example(User.class);
		Criteria criteria = example.createCriteria();
		// 根据nickName查询
		if (!CheckUtils.isNullOrEmpty(userWeiXinExt.getWebId())) {
			criteria.andEqualTo("webId", userWeiXinExt.getWebId());
		}
		// 根据nickName查询
		if (!CheckUtils.isNullOrEmpty(userWeiXinExt.getUcode())) {
			criteria.andEqualTo("uCode", userWeiXinExt.getUcode());
		}
		// 根据nickName查询
		if (!CheckUtils.isNullOrEmpty(userWeiXinExt.getNickname())) {
			criteria.andEqualTo("nickName", userWeiXinExt.getNickname());
		}

		// 排序
		example.setOrderByClause(" DELETE_FLAG asc, MODIFY_DATE DESC");
		// 根据条件查询角色
		List<UserWeiXin> list = null;
		try {
			list = userDao.selectByExample(example);
			// 查询方法 TODO
			return list.get(0);
		} catch (Exception e) {
			// 异常信息
			throw new AppException(e);
		}
	}
	
	/**
	 * 微信用户一览：下载CSV
	 */
	@Override
	public List<UserWxCsv> download(UserWeiXinExt req) throws AppException {
		try {
			return userDao.selectDownByUserWeiXin(req);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			throw new AppException(messageHelper.mesg_error_0001, e);
		}

	}

	@Override
	public UserWeiXinExt selectCount(UserWeiXinExt userWeiXinExt) throws AppException {
		UserWeiXinExt userWeiXin = new UserWeiXinExt();
		try {
			int count = userDao.selectCountByExample(userWeiXinExt);
			userWeiXin.setDataCount(count);
			return userWeiXin;
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			throw new AppException(messageHelper.mesg_error_0001, e);
		}
	}

	@Override
	public List<String> selectProdid() throws AppException {
		try {
			List<String> prodids = userDao.selectProdid();
			return prodids;
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			throw new AppException(messageHelper.mesg_error_0001, e);
		}
	}

	@Override
	public List<String> selectProdgrnam() throws AppException {
		try {
			List<String> prodgrnams = userDao.selectProdgrnam();
			return prodgrnams;
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			throw new AppException(messageHelper.mesg_error_0001, e);
		}
	}

	@Override
	public List<PdCsvDataExt> selectPdCount() throws AppException {
		try {
			return userDao.selectPdCount();
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			throw new AppException(messageHelper.mesg_error_0001, e);
		}
	}

	@Override
	public int selectProdCount(UserWeiXin userWeiXin) throws AppException {
		try {
			return userDao.selectProdCount(userWeiXin);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			throw new AppException(messageHelper.mesg_error_0001, e);
		}
	}

	@Override
	public List<UdCsvDataExt> selectWebIdAndUcode() throws AppException {
		try {
			List<UdCsvDataExt> UdList = userDao.selectWebIdAndUcode();
			return UdList;
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			throw new AppException(messageHelper.mesg_error_0001, e);
		}
	}

	@Override
	public List<QrCsvDataExt> selectQrCsvData(ReportExt reportExt) {
		try {
			String startDate = Constants.BLANK_STR;
			String endDate = Constants.BLANK_STR;
			if (!CheckUtils.isNull(reportExt.getStartDate())) {
				startDate = DateUtils.getStringDate(reportExt.getStartDate());
			}
			if (!CheckUtils.isNull(reportExt.getEndDate())) {
				endDate = DateUtils.getStringDate(reportExt.getEndDate());
			}
			List<QrCsvDataExt> QrList = userDao.selectQrCsvData(startDate, endDate);
			return QrList;
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			throw new AppException(messageHelper.mesg_error_0001, e);
		}
	}

	@Override
	public UserStatusExcelDataExt selectUserStatusExcelData(ReportExt reportExt) throws AppException {
		try {
			String startDate = Constants.BLANK_STR;
			String endDate = Constants.BLANK_STR;
			if (!CheckUtils.isNull(reportExt.getStartDate())) {
				startDate = DateUtils.getStringDate(reportExt.getStartDate());
			}
			if (!CheckUtils.isNull(reportExt.getEndDate())) {
				endDate = DateUtils.getStringDate(reportExt.getEndDate());
			}
			UserStatusExcelDataExt usede = userDao.selectUserStatusExcelData(startDate, endDate);
			return usede;
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			throw new AppException(messageHelper.mesg_error_0001, e);
		}
	}

}
