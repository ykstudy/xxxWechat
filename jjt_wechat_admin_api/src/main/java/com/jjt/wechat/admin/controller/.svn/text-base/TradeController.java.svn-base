package com.qiaohu.wechat.admin.controller;

import java.sql.Timestamp;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.github.pagehelper.Page;
import com.qiaohu.wechat.admin.BaseController;
import com.qiaohu.wechat.admin.RestResult;
import com.qiaohu.wechat.admin.auth.AuthRequired;
import com.qiaohu.wechat.admin.dto.BasePage;
import com.qiaohu.wechat.common.utils.CheckUtils;
import com.qiaohu.wechat.common.utils.DateUtils;
import com.qiaohu.wechat.core.entity.TradeDescription;
import com.qiaohu.wechat.core.entity.extend.TradeDescriptionExt;
import com.qiaohu.wechat.core.exception.AppException;
import com.qiaohu.wechat.core.service.ITradeService;

@RestController
@RequestMapping("/trade")
public class TradeController extends BaseController {

	@Autowired
	ITradeService tradeService;

	/*
	 * 一览画面数据取得 返回一个RestResult对象
	 */
	@AuthRequired(permission = "wx.trade.list")
	@RequestMapping(value = "/list", method = RequestMethod.POST)
	public RestResult list(@RequestBody TradeDescriptionExt tr) {
		// 参数检查
		// 商品编号TeadeId 英数字检查
		// if (!CheckUtils.checkPara(tr.getProdId(),
		// CheckUtils.CHINESE_LETTER_DIGIT, 20)) {
		// return new RestResult(messageHelper.mesg_info_0008);
		// }
		// 开始时间和结束时间比较
		if (!CheckUtils.isNullOrEmpty(tr.getEndDate())
				&& !CheckUtils.isNullOrEmpty(tr.getStartDate())) {
			int st = Integer.parseInt(tr.getStartDate());
			int et = Integer.parseInt(tr.getEndDate());

			if (st > et) {

				return new RestResult(messageHelper.mesg_info_0019);
			}

		}
		// 商品名称TeadeName 汉子或者英数字检查
		if (!CheckUtils.checkPara(tr.getProdgrName(),
				CheckUtils.CHINESE_LETTER_DIGIT, 40)) {
			return new RestResult(messageHelper.mesg_info_1301);
		}
		try {

			Page<TradeDescription> list = tradeService.search(tr);
			return new RestResult(new BasePage(list.getTotal(),
					list.getResult()));
		} catch (AppException e) {
			logger.error(e.getMessage(), e);
			// 返回异常信息
			return new RestResult(e.getMessage());
		}

	}

	/*
	 * 新增数据 入力值为对象T_Trade_Description
	 */
	@AuthRequired(permission = "wx.trade.create")
	@RequestMapping(value = "/create", method = RequestMethod.POST)
	public RestResult insert(@RequestBody TradeDescription tr) {
		// 参数检查
		// 商品编号TeadeId 英数字检查
		if (!CheckUtils.checkPara(tr.getProdId(), CheckUtils.LETTERORDIGIT, 20)) {
			return new RestResult(messageHelper.mesg_info_1301);
		}
		// 商品名称TeadeName 汉子或者英数字检查
		if (!CheckUtils.checkPara(tr.getProdgrName(),
				CheckUtils.CHINESE_LETTER_DIGIT, 40)) {
			return new RestResult(messageHelper.mesg_info_1302);
		}
		// 商品destcriptionUrl 检查 url格式是否正确
		if (!CheckUtils.checkPara(tr.getDescriptionUrl(), CheckUtils.HTTP, 120)) {
			return new RestResult(messageHelper.mesg_info_1303);
		}
		// 长度检查
		if (!CheckUtils.checkPara(tr.getFirstDat(), 200)) {
			return new RestResult(messageHelper.mesg_info_1304);
		}
		// 长度检查
		if (!CheckUtils.checkPara(tr.getRemarkDat(), 200)) {
			return new RestResult(messageHelper.mesg_info_1305);
		}
		TradeDescription old = null;
		try {
			old = tradeService.findByTrade(tr);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			// 返回异常信息
			return new RestResult(e.getMessage());
		}
		if (!CheckUtils.isNull(old)) {
			return new RestResult(messageHelper.mesg_info_0016);
		}
		Timestamp tt = DateUtils.getNowTimestamp();
		try {

			// 获取当前用户名
			String aid = getAdminId();
			// 当前新建用户名
			tr.setCreateUser(aid);
			// 新建更新用户名
			tr.setModifyUser(aid);
			// 新建时间
			tr.setCreateDate(tt);
			// 更新时间
			tr.setModifyDate(tt);

			RestResult ret = new RestResult();
			// 执行添加方法
			tradeService.insert(tr);
			// 消息
			ret.setMessage(messageHelper.mesg_info_0001);

			return ret;
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			// 返回异常信息
			return new RestResult(e.getMessage());
		}

	}

	/*
	 * 更新数据 入力值为整个对象
	 */
	@AuthRequired(permission = "wx.trade.update")
	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public RestResult update(@RequestBody TradeDescription tr) {
		// 参数检查
		if (!CheckUtils.checkPara(tr.getProdId(), CheckUtils.LETTERORDIGIT, 20)) {
			return new RestResult(messageHelper.mesg_info_1301);
		}
		// 商品名称TeadeName 汉子或者英数字检查 长度40
		if (!CheckUtils.checkPara(tr.getProdgrName(),
				CheckUtils.CHINESE_LETTER_DIGIT, 40)) {
			return new RestResult(messageHelper.mesg_info_1302);
		}
		// 商品destcriptionUrl 检查 url格式是否正确 长度120
		if (!CheckUtils.checkPara(tr.getDescriptionUrl(), CheckUtils.HTTP, 120)) {
			return new RestResult(messageHelper.mesg_info_1303);
		}
		// 长度检查
		if (!CheckUtils.checkPara(tr.getFirstDat(), 200)) {
			return new RestResult(messageHelper.mesg_info_1304);
		}
		// 长度检查
		if (!CheckUtils.checkPara(tr.getRemarkDat(), 200)) {
			return new RestResult(messageHelper.mesg_info_1305);
		}
		Timestamp tt = DateUtils.getNowTimestamp();
		try {
			RestResult ret = new RestResult();

			// 获取当前用户名
			String aid = getAdminId();
			// 新建更新用户名
			tr.setModifyUser(aid);
			// 不为空数据假造
			tr.setModifyDate(tt);
			// 更新方法
			tradeService.update(tr);
			// 返回消息
			ret.setMessage(messageHelper.mesg_info_0003);
			return ret;
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			// 返回异常信息
			return new RestResult(e.getMessage());
		}
	}

	/*
	 * 详情数据 入力值为tradeId
	 */
	@AuthRequired(permission = "wx.trade.update")
	@RequestMapping(value = "/detail", method = RequestMethod.GET)
	public RestResult detail(String id) {
		try {
			TradeDescription tradeDescription = tradeService.detail(id);
			if (CheckUtils.isNull(tradeDescription)) {
				return new RestResult(messageHelper.mesg_error_0001);
			}

			// 根据Id查询对象返回
			return new RestResult(tradeDescription);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			// 返回异常信息
			return new RestResult(e.getMessage());
		}

	}

	/*
	 * 删除数据 入力值为整个对象
	 */
	@AuthRequired(permission = "wx.trade.delete")
	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	public RestResult delete(@RequestBody TradeDescription tr) {
		RestResult ret = new RestResult();
		// 删除方法
		tradeService.delete(tr);
		// 返回消息
		ret.setMessage(messageHelper.mesg_info_0002);
		return ret;
	}
}
