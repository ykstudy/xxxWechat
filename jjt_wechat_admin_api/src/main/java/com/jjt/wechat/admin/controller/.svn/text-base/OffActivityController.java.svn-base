package com.qiaohu.wechat.admin.controller;

import java.sql.Timestamp;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.github.pagehelper.Page;
import com.qiaohu.wechat.admin.BaseController;
import com.qiaohu.wechat.admin.RestResult;
import com.qiaohu.wechat.admin.auth.AuthRequired;
import com.qiaohu.wechat.admin.dto.BasePage;
import com.qiaohu.wechat.common.api.MaterialAPI;
import com.qiaohu.wechat.common.api.enums.MaterialType;
import com.qiaohu.wechat.common.api.response.GetMaterialListResponse;
import com.qiaohu.wechat.common.api.response.GetMaterialTotalCountResponse;
import com.qiaohu.wechat.common.utils.CheckUtils;
import com.qiaohu.wechat.common.utils.DateUtils;
import com.qiaohu.wechat.constants.Constants;
import com.qiaohu.wechat.core.entity.Activity;
import com.qiaohu.wechat.core.entity.MaterialItem;
import com.qiaohu.wechat.core.entity.extend.ActivityExt;
import com.qiaohu.wechat.core.exception.AppException;
import com.qiaohu.wechat.core.service.IActivityService;
import com.qiaohu.wechat.helper.AppHelper;
import com.qiaohu.wechat.helper.ImageHelper;

@RestController
@RequestMapping("/offactivity")
public class OffActivityController extends BaseController {

	@Autowired
	private IActivityService activityService;

	@Autowired
	private AppHelper appHelper;

	@Autowired
	private ImageHelper imageHelper;

	/**
	 * 线上活动列表
	 * 
	 * @param para
	 * @return
	 */
	@AuthRequired(permission = "wx.offactivity.list")
	@RequestMapping(value = "/list", method = RequestMethod.POST)
	public RestResult list(@RequestBody ActivityExt para) {

		// 活动名称
		if (!CheckUtils.checkPara(para.getName(),
				CheckUtils.CHINESE_LETTER_DIGIT, 30)) {
			// 请正确输入活动名称
			return new RestResult(messageHelper.mesg_info_0801);
		}
		// 开始时间和结束时间比较
		if (!CheckUtils.isNull(para.getEndDate())
				&& !CheckUtils.isNull(para.getStartDate())) {
			if (!DateUtils.comparable(para.getStartDate(), para.getEndDate())) {
				// 开始日期不是大于结束日期
				return new RestResult(messageHelper.mesg_info_0019);
			}
		}
		Page<Activity> list = null;
		try {
			para.setCity(appHelper.getAreaName(para.getCity()));
			para.setCountry(appHelper.getAreaName(para.getCountry()));
			para.setProvince(appHelper.getAreaName(para.getProvince()));
			//有效区分的模糊查询
			if(!CheckUtils.isNullOrEmpty(para.getDeleteFlagTwo())){
				para.setDeleteFlag(para.getDeleteFlagTwo());
			}
			// 返回查询结果
			list = activityService.search(para);
			if (CheckUtils.isNullOrEmpty(list.getResult())
					&& para.getPage() > 0) {
				para.setPage(0);
				list = activityService.search(para);
			}
			return new RestResult(new BasePage(list.getTotal(),
					list.getResult()));
		} catch (AppException e) {
			// 返回异常信息
			return new RestResult(messageHelper.mesg_error_0001);
		}

	}

	@AuthRequired(permission = "wx.offactivity.create")
	@RequestMapping(value = "/create", method = RequestMethod.POST)
	public RestResult create(@RequestBody Activity activity) {
		// 活动名称
		if (!CheckUtils.checkParas(activity.getName(),
				CheckUtils.CHINESE_LETTER_DIGIT, 30)) {
			return new RestResult(messageHelper.mesg_info_0801);
		}
		// 开始时间
		if (CheckUtils.isNull(activity.getStartDate())) {
			return new RestResult(messageHelper.mesg_info_0802);
		}
		// 结束时间
		if (CheckUtils.isNull(activity.getEndDate())) {
			return new RestResult(messageHelper.mesg_info_0803);
		}
		if (!DateUtils.comparable(activity.getStartDate(), activity.getEndDate())) {
			// 开始日期不是大于结束日期
			return new RestResult(messageHelper.mesg_info_0019);
		}
		
//		if (!DateUtils.comparable(new Date(), activity.getStartDate())) {
//			// 开始日期不是大于结束日期 TODO
//			return new RestResult("截至时间应大于当前时间");
//		}
		// 图文消息
		if (CheckUtils.isNullOrEmpty(activity.getMediaId())) {
			return new RestResult(messageHelper.mesg_info_0804);
		}

		Timestamp tt = DateUtils.getNowTimestamp();
		try {
			String aid = getAdminId();
			activity.setDeleteFlag(Constants.NORMAL_STATUS);
			activity.setCreateUser(aid);
			activity.setCreateDate(tt);
			activity.setModifyUser(aid);
			activity.setModifyDate(tt);

			save(activity, false);
			return new RestResult(Constants.SUCCESS,
					messageHelper.mesg_info_0001);

		} catch (AppException e) {
			logger.error(e.getMessage(), e);
			return new RestResult(e.getMessage());
		}

	}

	@AuthRequired(permission = "wx.offactivity.update")
	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public RestResult update(@RequestBody Activity activity) {
		// 活动名称
		if (!CheckUtils.checkParas(activity.getName(),
				CheckUtils.CHINESE_LETTER_DIGIT, 30)) {
			return new RestResult(messageHelper.mesg_info_0801);
		}
		// 开始时间
		if (CheckUtils.isNull(activity.getStartDate())) {
			return new RestResult(messageHelper.mesg_info_0802);
		}
		// 结束时间
		if (CheckUtils.isNull(activity.getEndDate())) {
			return new RestResult(messageHelper.mesg_info_0803);
		}

		if (!DateUtils.comparable(activity.getStartDate(), activity.getEndDate())) {
			// 开始日期不是大于结束日期
			return new RestResult(messageHelper.mesg_info_0019);
		}
		// 图文消息
		if (CheckUtils.isNullOrEmpty(activity.getMediaId())) {
			return new RestResult(messageHelper.mesg_info_0804);
		}

		try {
			System.out.println(getAdminId()+"获取更新者名称");
			activity.setModifyUser(getAdminId());
			save(activity, true);
			return new RestResult(Constants.SUCCESS,
					messageHelper.mesg_info_0003);
		} catch (AppException e) {
			return new RestResult(e.getMessage());
		}

	}

	@RequestMapping(value = "/detail", method = RequestMethod.GET)
	public RestResult detail(String id) {
		Activity admin = null;
		try {
			admin = activityService.detail(id);
			admin.setCity(appHelper.getAreaKey(admin.getCity(),"2"));
			admin.setCountry(appHelper.getAreaKey(admin.getCountry(),"0"));
			admin.setProvince(appHelper.getAreaKey(admin.getProvince(),"1"));
			if (CheckUtils.isNull(admin)) {
				return new RestResult(messageHelper.mesg_info_0007);
			}
			//******************从微信公众号端获取次图文 start by liubo 2017-12-25***************
			MaterialAPI materialAPI = imageHelper.getMaterialAPI();
			GetMaterialTotalCountResponse gt = materialAPI.countMaterial();//获取图文素材的总数量
			GetMaterialListResponse res = materialAPI.batchGetMaterialAll(
								MaterialType.NEWS, 0,gt.getNews());
			List<MaterialItem> list = imageHelper.getMaterialImage(res);
			//获取该头图文对应的子图文
			MaterialItem materialItem = imageHelper.getSonItemListByMediaId(list, admin.getMediaId());
			//******************从微信公众号端获取次图文 end by liubo 2017-12-25***************
			if(!CheckUtils.isNullOrEmpty(materialItem.getSonItemList())) {
				admin.setSonItemList(materialItem.getSonItemList());
			}
			return new RestResult(admin);
		} catch (AppException e) {
			return new RestResult(e.getMessage());
		}
	}
	
	
	@AuthRequired(permission = "wx.offactivity.delete")
	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	public RestResult delete(@RequestBody Activity activity) {
		try {

			Activity newActivity = new Activity();

			newActivity.setModifyUser(getAdminId());
			newActivity.setDeleteFlag(Constants.DELETE_STATUS);
			newActivity.setModifyDate(activity.getModifyDate());
			newActivity.setId(activity.getId());

			int ret = activityService.delete(newActivity);
			if (ret > Constants.SUCCESS) {
				RestResult rett = new RestResult();
				rett.setMessage(messageHelper.mesg_info_0002);
				return rett;
			} else {
				return new RestResult(messageHelper.mesg_info_0006);
			}

		} catch (AppException e) {
			return new RestResult(e.getMessage());
		}

	}

	@Transactional
	private void save(Activity activity, boolean isUpdate) throws AppException {
		int ret = 0;
		try {
			activity.setCity(appHelper.getAreaName(activity.getCity()));
			activity.setCountry(appHelper.getAreaName(activity.getCountry()));
			activity.setProvince(appHelper.getAreaName(activity.getProvince()));
			String imagePath = imageHelper.saveImage(activity.getImage(),
					activity.getMediaId(), Constants.OFFACTIVITY);
			activity.setImage(imagePath);
			if (isUpdate) {
				ret = activityService.update(activity);
				if (ret <= Constants.SUCCESS) {
					throw new AppException(messageHelper.mesg_info_0005);
				}
			} else {
				ret = activityService.insert(activity);
				if (ret <= Constants.SUCCESS) {
					throw new AppException(messageHelper.mesg_info_0004);
				}
			}
		} catch (AppException e) {
			logger.error(e.getMessage(), e);
			throw new AppException(messageHelper.mesg_error_0001);
		}

	}
	
	/**
	 * 发布数据给预览组：改变deleteFlag的状态值为2
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/publish", method = RequestMethod.GET)
	public RestResult publish(String id) {
		Activity admin = null;
		try {

			admin = activityService.detail(id);
			//发布改变deleteFlag的值为2
			admin.setDeleteFlag(Constants.DF_TWO);
			int ret = activityService.update(admin);
			if(ret > Constants.SUCCESS){
				RestResult rett = new RestResult();
				rett.setMessage(messageHelper.mesg_info_0805);
				return rett;
			}else{
				return new RestResult(messageHelper.mesg_info_0806);
			}
			
		} catch (AppException e) {
			return new RestResult(e.getMessage());
		}
		
	}
}
