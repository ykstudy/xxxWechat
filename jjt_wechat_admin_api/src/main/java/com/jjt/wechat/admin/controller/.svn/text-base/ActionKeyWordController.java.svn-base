package com.qiaohu.wechat.admin.controller;

import java.sql.Timestamp;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.github.pagehelper.Page;
import com.qiaohu.wechat.admin.BaseController;
import com.qiaohu.wechat.admin.RestResult;
import com.qiaohu.wechat.admin.auth.AuthRequired;
import com.qiaohu.wechat.admin.dto.BasePage;
import com.qiaohu.wechat.admin.enums.KeyWordType;
import com.qiaohu.wechat.admin.enums.ReplyType;
import com.qiaohu.wechat.common.utils.CheckUtils;
import com.qiaohu.wechat.common.utils.DateUtils;
import com.qiaohu.wechat.constants.Constants;
import com.qiaohu.wechat.core.entity.Keyword;
import com.qiaohu.wechat.core.entity.extend.KeywordExt;
import com.qiaohu.wechat.core.exception.AppException;
import com.qiaohu.wechat.core.service.IKeyWordService;
import com.qiaohu.wechat.helper.MessageHelper;

@RestController
@RequestMapping("/actionKeyword")
public class ActionKeyWordController extends BaseController {

	@Autowired
	private IKeyWordService keyWordService;
	
	@Autowired
	private MessageHelper messageHelper;

	@AuthRequired(permission = "wx.actionKeyword.list")
	@RequestMapping(value = "/list", method = RequestMethod.POST)
	public RestResult list(@RequestBody KeywordExt para) {
		// 画面参数 常见问题
		if (!CheckUtils.checkPara(para.getKeyword(),
				CheckUtils.CHINESE_LETTER_DIGIT, 100)) {
			return new RestResult(messageHelper.mesg_info_0501);
		}
		Page<Keyword> list = null;
		try {
		
			para.setType(KeyWordType.ACTION_KEYWORD.getType());
			// 返回查询结果
			list = keyWordService.search(para);
			if (CheckUtils.isNullOrEmpty(list.getResult())
					&& para.getPage() > 0) {
				para.setPage(0);
				list = keyWordService.search(para);
			}
			return new RestResult(new BasePage(list.getTotal(),
					list.getResult()));
		} catch (AppException e) {
			// 返回异常信息
			return new RestResult(messageHelper.mesg_error_0001);
		}

	}

	@AuthRequired(permission = "wx.actionKeyword.create")
	@RequestMapping(value = "/create", method = RequestMethod.POST)
	public RestResult create(@RequestBody Keyword keyword) {
		// 常见问题
		if (!CheckUtils.checkPara(keyword.getKeyword(), 100)) {
			return new RestResult(messageHelper.mesg_info_0501);
		}
		// 常见问题回复内容
		if (!CheckUtils.checkPara(keyword.getReplyContent(), 300)) {
			return new RestResult(messageHelper.mesg_info_0502);
		}

		String content = keyword.getReplyContent().replace("<br>", "\n");
		content = content.replace("</div><div>", "\n");
		content = content.replace("</p><p>", "\n");
		content = content.replace("<div>", "").replace("</div>", "");
		content = content.replace("<p>", "").replace("</p>", "");
		content = content.replace("&nbsp;", "");
		// 关键字回复内容
		if (!CheckUtils.checkPara(content, 600)) {
			return new RestResult(messageHelper.mesg_info_0602);
		}
		keyword.setReplyContent(content);
		
		Timestamp tt = DateUtils.getNowTimestamp();
		keyword.setType(KeyWordType.ACTION_KEYWORD.getType());
		keyword.setReplyType(ReplyType.TEXT.getType());
		try {
			Keyword old = keyWordService.detail(keyword.getKeyword());
			if (!CheckUtils.isNull(old)) {
				return new RestResult(messageHelper.mesg_info_0016);
			}
			//keyword.setTitle(null);
			//keyword.setImage(null);
			String aid = getAdminId();
			keyword.setCreateUser(aid);
			keyword.setCreateDate(tt);
			keyword.setModifyUser(aid);
			keyword.setModifyDate(tt);

			int ret = keyWordService.insert(keyword);
			if (ret > Constants.SUCCESS) {
				return new RestResult(Constants.SUCCESS,
						messageHelper.mesg_info_0001);
			} else {
				return new RestResult(messageHelper.mesg_info_0004);
			}

		} catch (AppException e) {
			return new RestResult(messageHelper.mesg_error_0001);
		}

	}

	@AuthRequired(permission = "wx.actionKeyword.update")
	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public RestResult update(@RequestBody KeywordExt keyword) {
		// 常见问题
		if (!CheckUtils.checkPara(keyword.getKeyword(), 100)) {
			return new RestResult(messageHelper.mesg_info_0501);
		}
		// 常见问题回复内容
		if (!CheckUtils.checkPara(keyword.getReplyContent(), 300)) {
			return new RestResult(messageHelper.mesg_info_0502);
		}
		
		String content = keyword.getReplyContent().replace("<br>", "\n");
		content = content.replace("</div><div>", "\n");
		content = content.replace("</p><p>", "\n");
		content = content.replace("<div>", "").replace("</div>", "");
		content = content.replace("<p>", "").replace("</p>", "");
		content = content.replace("&nbsp;", "");
		// 关键字回复内容
		if (!CheckUtils.checkPara(content, 600)) {
			return new RestResult(messageHelper.mesg_info_0602);
		}
		keyword.setReplyContent(content);
		
		keyword.setType(KeyWordType.ACTION_KEYWORD.getType());
		keyword.setReplyType(ReplyType.TEXT.getType());
		try {
			keyword.setModifyUser(getAdminId());

			//keyword.setTitle(null);
			//keyword.setImage(null);

			int ret = keyWordService.update(keyword,keyword.getOldKeyword());
			if (ret > Constants.SUCCESS) {
				return new RestResult(Constants.SUCCESS,
						messageHelper.mesg_info_0003);
			} else {
				return new RestResult(messageHelper.mesg_info_0005);
			}
		} catch (AppException e) {
			return new RestResult(messageHelper.mesg_error_0001);
		}

	}

	@RequestMapping(value = "/detail", method = RequestMethod.GET)
	public RestResult detail(String id) {

		KeywordExt keywordExt = null;
		try {
			keywordExt = keyWordService.detail(id);
			if (CheckUtils.isNull(keywordExt)) {
				return new RestResult(messageHelper.mesg_info_0007);
			}
			keywordExt.setOldKeyword(keywordExt.getKeyword());
			return new RestResult(keywordExt);
		} catch (AppException e) {
			return new RestResult(messageHelper.mesg_error_0001);
		}
	}

	@AuthRequired(permission = "wx.actionKeyword.delete")
	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	public RestResult delete(@RequestBody Keyword keyword) {
		try {
			int ret = keyWordService.delete(keyword);
			if (ret > Constants.SUCCESS) {
				return new RestResult(Constants.SUCCESS,
						messageHelper.mesg_info_0002);
			} else {
				return new RestResult(messageHelper.mesg_info_0006);
			}

		} catch (AppException e) {
			return new RestResult(messageHelper.mesg_error_0001);
		}

	}
}
