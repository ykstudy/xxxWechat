package com.qiaohu.wechat.admin.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.time.DateFormatUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.github.pagehelper.Page;
import com.qiaohu.wechat.admin.BaseController;
import com.qiaohu.wechat.admin.RestResult;
import com.qiaohu.wechat.admin.auth.AuthRequired;
import com.qiaohu.wechat.admin.dto.BasePage;
import com.qiaohu.wechat.admin.dto.MassCommonDto;
import com.qiaohu.wechat.admin.service.IMassCommonService;
import com.qiaohu.wechat.admin.util.MassAddressUtil;
import com.qiaohu.wechat.common.api.MaterialAPI;
import com.qiaohu.wechat.common.api.enums.MaterialType;
import com.qiaohu.wechat.common.api.response.GetMaterialListResponse;
import com.qiaohu.wechat.common.api.response.GetMaterialTotalCountResponse;
import com.qiaohu.wechat.common.utils.CheckUtils;
import com.qiaohu.wechat.common.utils.DateUtils;
import com.qiaohu.wechat.constants.Constants;
import com.qiaohu.wechat.core.entity.MassAddress;
import com.qiaohu.wechat.core.entity.MassLevel;
import com.qiaohu.wechat.core.entity.MassSend;
import com.qiaohu.wechat.core.entity.MaterialItem;
import com.qiaohu.wechat.core.entity.extend.Areas;
import com.qiaohu.wechat.core.entity.extend.MassSendExt;
import com.qiaohu.wechat.core.exception.AppException;
import com.qiaohu.wechat.core.service.IMassAddressService;
import com.qiaohu.wechat.core.service.IMassLevelService;
import com.qiaohu.wechat.core.service.IMassSendService;
import com.qiaohu.wechat.helper.AppHelper;
import com.qiaohu.wechat.helper.ImageHelper;

@RestController
@RequestMapping("/push")
public class MassSendController extends BaseController {

	@Autowired
	private IMassSendService massService;

	@Autowired
	private IMassLevelService massLevelService;

	@Autowired
	private IMassAddressService massAddressService;
	
	@Autowired
	private IMassCommonService massCommonService;

	@Autowired
	private AppHelper appHelper;

	@Autowired
	private ImageHelper imageHelper;

	/*
	 * 一览画面数据取得 返回一个RestResult对象
	 */
	@AuthRequired(permission = "wx.push.list")
	@RequestMapping(value = "/list", method = RequestMethod.POST)
	public RestResult list(@RequestBody MassSendExt massExt) {
		// 开始时间和结束时间比较
		if(!CheckUtils.isNull(massExt.getEndDate())){
			long et = massExt.getEndDate().getTime();
			massExt.setEndDate(DateUtils.parse(
					DateFormatUtils.format(new Date(et), "yyyy-MM-dd 23:59:59"),
					DateUtils.YMDHHMMSS));
		}
		if(!CheckUtils.isNull(massExt.getStartDate())){
			long st = massExt.getStartDate().getTime();
			massExt.setStartDate(DateUtils.parse(
					DateFormatUtils.format(new Date(st), "yyyy-MM-dd 00:00:00"),
					DateUtils.YMDHHMMSS));
		}
		if (!CheckUtils.isNull(massExt.getEndDate())
				&& !CheckUtils.isNull(massExt.getStartDate())) {
			if (!DateUtils.comparable(massExt.getStartDate(),
					massExt.getEndDate())) {

				return new RestResult(messageHelper.mesg_info_0019);
			}

		}
		//***************************查询特定用户推送******************************************************
		//如果sendType是2那么表明是特定用户群推，此时将特定用户群推的数据返回给画面
		if(!CheckUtils.isNull(massExt.getSendType())) {
			if(massExt.getSendType().contains("2")) {
				massExt.setSendType("2");
				//获取特定用户群推的数据
				//massService.searchSpecialMass(massExt);
				return new RestResult(new BasePage(massService.searchSpecialMass(massExt).getTotal(),
						massService.searchSpecialMass(massExt).getResult()));
			}
		}
		//***************************查询特定用户推送******************************************************
		
		
		Page<MassSend> list = null;
		try {
			//模糊查询推送状态：已发送
			if(!CheckUtils.isNullOrEmpty(massExt.getPushStatus())){
				massExt.setStatus(massExt.getPushStatus());
			}
			list = massService.search(massExt);
			if (CheckUtils.isNullOrEmpty(list.getResult())
					&& massExt.getPage() > 0) {
				massExt.setPage(0);
				list = massService.search(massExt);
			}
			
			Page<MassSendExt> list2 = getPageMassSendExt(list);
			
			//地区模糊查询处理
			String city = appHelper.getAreaName(massExt.getCity());
			String province =appHelper.getAreaName(massExt.getProvince());
			String country =appHelper.getAreaName(massExt.getCountry());
			if(!CheckUtils.isNullOrEmpty(city)||!CheckUtils.isNullOrEmpty(province)||!CheckUtils.isNullOrEmpty(country)) {
				//含有地区的对象
				list2 = MassAddressUtil.getPage(city, province, country, list2);
			}
			
			// 返回参数
			return new RestResult(new BasePage(list.getTotal(),
					list2.getResult()));
		} catch (AppException e) {
			logger.error(e.getMessage(), e);
			// 返回异常信息
			return new RestResult(e.getMessage());
		}

	}

	@AuthRequired(permission = "wx.push.create")
	@RequestMapping(value = "/create", method = RequestMethod.POST)
	public RestResult create(@RequestBody MassSendExt massSend) {

		try {
			String aid = getAdminId();
			massSend.setCreateUser(aid);
			massSend.setCreateDate(DateUtils.getCreateDate(DateUtils
					.getNowTimestamp()));

			String bt = massSend.getConditionBirthday();
			if (!CheckUtils.isNull(bt)) {
				massSend.setConditionBirthday(massSend.getConditionBirthday());
			}

			// add a judgment for deliverTimesLow start at 2017/08/10
			if (!CheckUtils.isNull(massSend.getDeliverTimesLow())) {
				massSend.setDeliverTimesLow(massSend.getDeliverTimesLow());
			}

			if (!CheckUtils.isNull(massSend.getDeliverTimesHigh())) {
				massSend.setDeliverTimesHigh(massSend.getDeliverTimesHigh());
			}
			
			if(massSend.getDeliverTimesHigh()!=""&&massSend.getDeliverTimesLow()!=""){
				if(Integer.parseInt(massSend.getDeliverTimesHigh()) <Integer.parseInt(massSend.getDeliverTimesLow())){
					return new RestResult(messageHelper.mesg_info_1406);
				}
			}
			
			// add a judgment for deliverTimesLow end at 2017/08/10
			massSend.setStatus(Constants.NORMAL_STATUS);

			// 保存图文图片到本地
			//String imagePath = imageHelper.saveImage(massSend.getImage(),
					//massSend.getMediaId(), Constants.MASSSEND);
			//massSend.setImage(imagePath);
			if (!CheckUtils.isNullOrEmpty(massSend.getConditionVersion())) {
				if (massSend.getConditionVersion().equals("月龄版")) {
					massSend.setConditionVersion(massSend.getProdIdExtOne());
				}
			}
			//设置区分数据的来源send_flag 1:表示原群推管理新增的数据 2：表示累积发货次数
			massSend.setSendFlag("1");
			int ret = massService.insert(massSend);
			if (ret > Constants.SUCCESS) {
				// 主表插入成功，两个副表插入，反之不插入
				// 地区插入
				massSend.getTemAreas();
				insertMassAddress(massSend.getTemAreas(), massService
						.selectMassSend(massSend).getId() + "");
				// 会员等级插入
				insertMassLevel(massSend.getUserLevels(), massService
						.selectMassSend(massSend).getId() + "");
				return new RestResult(Constants.SUCCESS,
						messageHelper.mesg_info_0001);
			} else {
				return new RestResult(messageHelper.mesg_error_0001);
			}

		} catch (AppException e) {
			logger.error(messageHelper.mesg_error_0001, e);
			return new RestResult(messageHelper.mesg_error_0001);
		}

	}

	@AuthRequired(permission = "wx.push.update")
	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public RestResult update(@RequestBody MassSendExt massSend) {
		try {

			if (CheckUtils.isUrl(massSend.getImage())) {

				// 保存图文图片到本地
				String imagePath = imageHelper.saveImage(massSend.getImage(),
						massSend.getMediaId(), Constants.MASSSEND);
				massSend.setImage(imagePath);
			}
			if (!CheckUtils.isNullOrEmpty(massSend.getConditionVersion())) {
				if (massSend.getConditionVersion().equals("月龄版")) {
					massSend.setConditionVersion(massSend.getProdIdExtOne());
				}
			}
			
			if(massSend.getDeliverTimesHigh()!=""&&massSend.getDeliverTimesLow()!=""){
				if(Integer.parseInt(massSend.getDeliverTimesHigh()) <Integer.parseInt(massSend.getDeliverTimesLow())){
					return new RestResult(messageHelper.mesg_info_1406);
				}
			}
			
			
			int ret = massService.update(massSend);
			if (ret > Constants.SUCCESS) {
				// 获取会员等级
				//先获取到对应的地区
				List<MassAddress> areas = massService.selectAddressByMassId(massSend.getId()
						+ "");
				List<Areas> temAreas = massSend.getTemAreas();
				// 获取地区
					if(!CheckUtils.isNullOrEmpty(areas)){
						//先删除原有的数据
						for (int i = 0; i < areas.size(); i++) {
								massAddressService.delete(areas.get(i));
						}
					}
					
				if(!CheckUtils.isNullOrEmpty(temAreas)){
					//更新
					for (int i = 0; i < temAreas.size(); i++) {
						MassAddress massAddress = new MassAddress();
						massAddress.setCity(appHelper.getAreaName(temAreas.get(i).getCity()));
						massAddress.setCountry(appHelper.getAreaName(temAreas.get(i).getCountry()));
						massAddress.setProvince(appHelper.getAreaName(temAreas.get(i).getProvince()));
						massAddress.setMassId(massSend.getId()+"");
						massAddress.setType("0");//群推
						massAddress.setCreateDate(DateUtils.getCreateDate(DateUtils
									.getNowTimestamp()));
						massAddressService.insert(massAddress);
					}
				}
				//更新会员等级
				//删除原有的数据
				massService.deleteByMassId(massSend.getId());
				List<String> userLevels = massSend.getUserLevels();
			if(!CheckUtils.isNullOrEmpty(userLevels)){
				for (int i = 0; i < userLevels.size(); i++) {
					MassLevel massLevel = new MassLevel();
					massLevel.setMassId(massSend.getId()+"");
					massLevel.setConditionLevel(userLevels.get(i));
					massLevel.setType("0");//群推
					massLevel.setCreateDate(DateUtils.getCreateDate(DateUtils
							.getNowTimestamp()));
					massLevelService.insert(massLevel);
				}
			}
				return new RestResult(Constants.SUCCESS,
						messageHelper.mesg_info_0003);
			} else {
				return new RestResult(messageHelper.mesg_error_0001);
			}
		} catch (AppException e) {
			logger.error(messageHelper.mesg_error_0001, e);
			return new RestResult(messageHelper.mesg_error_0001);
		}

	}

	@AuthRequired(permission = "wx.push.delete")
	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	public RestResult delete(@RequestBody MassSendExt massSend) {
		try {
			int ret=0;
			//********************************特定用户推送删除****************************************
			if("2".equals(massSend.getSendFlag())) {
				ret=massService.deleteSpecial(massSend);
			//********************************特定用户推送删除****************************************
			}else {
				ret = massService.delete(massSend);
			}
			
			if (ret > Constants.SUCCESS) {
				//删除地区
				List<MassAddress> massAddresses = massService.selectAddressByMassId(massSend.getId()
						+ "");
				if(massAddresses.size()!=0){
					for (MassAddress massAddress : massAddresses) {
						massAddressService.delete(massAddress);
					}
				}
				
				//删除等级
				massService.deleteByMassId(massSend.getId());
				
				return new RestResult(Constants.SUCCESS,
						messageHelper.mesg_info_0002);
			} else {
				return new RestResult(messageHelper.mesg_error_0001);
			}

		} catch (AppException e) {
			logger.error(e.getMessage(), e);
			return new RestResult(messageHelper.mesg_error_0001);
		}
	}

	/*
	 * 详情数据 入力值为openId
	 */
	@RequestMapping(value = "/detail", method = RequestMethod.GET)
	public RestResult detail(String id,String sendFlag) {
		try {
			//**************************特定用户查询*********************************
			//判断如果sendFlag为2，那么说明是特定用户群推
			if("2".equals(sendFlag)) {
				MassSend massSend = massService.massSpecialSendDetail(id);
				massSend.setSendFlag(sendFlag);
				return new RestResult(massSend);
			}
			//**************************特定用户查询*********************************
			
			MassSend massSend = massService.massSendDetail(id);
			
			  MassSendExt mse = new MassSendExt();
			  mse.setConditionBirthday(massSend.getConditionBirthday());
				mse.setConditionStatus(massSend.getConditionStatus());
				mse.setConditionVersion(massSend.getConditionVersion());
				mse.setDeliverTimesHigh(massSend.getDeliverTimesHigh());
				mse.setDeliverTimesLow(massSend.getDeliverTimesLow());
				mse.setId(massSend.getId());
				mse.setStatus(massSend.getStatus());
				mse.setProdIdExtOne(massSend.getConditionVersion());//将版本号放入这个专门存月龄号版本号的属性中，为了编辑时让页面也显示月龄号
				mse.setTitle(massSend.getTitle());
				mse.setMediaId(massSend.getMediaId());
				mse.setImage(massSend.getImage());
				mse.setMonthNumber(massSend.getMonthNumber());
				mse.setCreateDate(massSend.getCreateDate());
				//mse.setAreas("地区");
				
			  //处理月龄号编辑画面显示
			  if(!CheckUtils.isNullOrEmpty(mse.getConditionVersion())){
				  if((mse.getConditionVersion()).indexOf("月龄版") >-1){
					  mse.setConditionVersion("月龄版");
				  }
			  }
			  
				
			  //向页面传送会员等级
			  List<String> userLevels = massService.selectByMassId(massSend.getId() + "");
			  if(userLevels.size()!=0){
				  mse.setUserLevels(userLevels);
			  }
			  mse.setConditionLevel(getAddress(userLevels));
			  //向页面传送地区
			  List<MassAddress> massAddresses = massService.selectAddressByMassId(massSend.getId()
						+ "");
			  List<Areas> areas = new ArrayList<Areas>();
			  if(massAddresses.size()!=0){
				  String[] address = new String[massAddresses.size()];
				  for (int i = 0; i < massAddresses.size(); i++) {
					  Areas area = new Areas();
					  area.setCity(appHelper.getAreaKey(massAddresses.get(i).getCity(),"2"));
					  area.setCountry(appHelper.getAreaKey(massAddresses.get(i).getCountry(),"0"));
					  area.setProvince(appHelper.getAreaKey(massAddresses.get(i).getProvince(),"1"));
					  address[i]=massAddresses.get(i).getCountry()
							  +"\t"+massAddresses.get(i).getProvince()
							  +"\t"+massAddresses.get(i).getCity()+" | ";
					  areas.add(area);
				  }
				  
				  String str = "";
				  for (int i = 0; i < address.length; i++) {
					str+=address[i];
				  }
				  str = str.substring(0, str.length()-2);
				  mse.setAreas(str);
				  //将获取到的地区存储
				  mse.setTemAreas(areas);
			  }
			if (CheckUtils.isNull(massSend)) {
				return new RestResult(messageHelper.mesg_info_0007);
			}
			
			//******************从微信公众号端获取次图文 start by liubo 2017-12-25***************
			//获取次图文
			MaterialAPI materialAPI = imageHelper.getMaterialAPI();
			GetMaterialTotalCountResponse gt = materialAPI.countMaterial();//获取图文素材的总数量
			GetMaterialListResponse res = materialAPI.batchGetMaterialAll(
								MaterialType.NEWS, 0,gt.getNews());
			List<MaterialItem> list = imageHelper.getMaterialImage(res);
			//获取该头图文对应的子图文
			MaterialItem materialItem = imageHelper.getSonItemListByMediaId(list, massSend.getMediaId());
			//******************从微信公众号端获取次图文 end by liubo 2017-12-25***************
			if(!CheckUtils.isNullOrEmpty(materialItem.getSonItemList())) {
				mse.setSonItemList(materialItem.getSonItemList());
			}
			// 根据Id查询对象返回
			return new RestResult(mse);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			// 返回异常信息
			return new RestResult(e.getMessage());
		}

	}

	/**
	 * 发布数据给预览组：改变deleteFlag的状态值为2
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/publish", method = RequestMethod.GET)
	public RestResult publish(String id) {
		MassSend massSend = null;
		try {

			massSend = massService.massSendDetail(id);
			// 发布改变deleteFlag的值为2
			massSend.setStatus(Constants.DF_TWO);
			int ret = massService.update(massSend);
			if (ret > Constants.SUCCESS) {
				RestResult rett = new RestResult();
				rett.setMessage(messageHelper.mesg_info_0805);
				return rett;
			} else {
				return new RestResult(messageHelper.mesg_info_0806);
			}

		} catch (AppException e) {
			return new RestResult(e.getMessage());
		}

	}

	private boolean insertMassLevel(List<String> userLevels, String massId) {

		if (!CheckUtils.isNullOrEmpty(userLevels)) {
			MassLevel massLevel = new MassLevel();
			for (String string : userLevels) {
				massLevel.setConditionLevel(string);
				massLevel.setType("0");// 0为群推
				massLevel.setMassId(massId);
				massLevel.setCreateDate(DateUtils.getNowTimestamp());
				massLevelService.insert(massLevel);
			}
			return true;
		}
		return false;
	}

	private boolean insertMassAddress(List<Areas> temAreas, String massId) {

		if (!CheckUtils.isNullOrEmpty(temAreas)) {
			MassAddress massAddress = new MassAddress();
			for (Areas area : temAreas) {
				massAddress.setCity(appHelper.getAreaName(area.getCity()));
				massAddress
						.setCountry(appHelper.getAreaName(area.getCountry()));
				massAddress.setProvince(appHelper.getAreaName(area
						.getProvince()));
				massAddress.setType("0");// 0为群推
				massAddress.setMassId(massId);
				massAddress.setCreateDate(DateUtils.getNowTimestamp());
				massAddressService.insert(massAddress);
			}
			return true;
		}
		return false;
	}

	private Page<MassSendExt> getPageMassSendExt(Page<MassSend> list) {
		
		Page<MassSendExt> list2 = new Page<MassSendExt>();
		// 将会员等级表的对应massId的会员等级数据设置到对应的list数据中
		for (MassSend massSend : list) {
			// 获取massId
			int massId = massSend.getId();
			// 获取地区
			MassLevel ml = new MassLevel();
			ml.setMassId(massId + "");
			MassSendExt mse = new MassSendExt();
			mse.setConditionBirthday(massSend.getConditionBirthday());
			mse.setConditionStatus(massSend.getConditionStatus());
			mse.setConditionVersion(massSend.getConditionVersion());
			mse.setDeliverTimesHigh(massSend.getDeliverTimesHigh());
			mse.setDeliverTimesLow(massSend.getDeliverTimesLow());
			mse.setId(massSend.getId());
			mse.setStatus(massSend.getStatus());
			mse.setTitle(massSend.getTitle());
			mse.setMediaId(massSend.getMediaId());
			mse.setImage(massSend.getImage());
			mse.setSendFlag(massSend.getSendFlag());
			mse.setMonthNumber(massSend.getMonthNumber());
			mse.setCreateDate(massSend.getCreateDate());
			List<String> userLevels = massService.selectByMassId(massId + "");
			List<MassAddress> areas = massService.selectAddressByMassId(massId
					+ "");
			if (!CheckUtils.isNullOrEmpty(areas)) {

				List<Areas> temAreas = new ArrayList<Areas>();
				for (int i = 0; i < areas.size(); i++) {
					Areas as = new Areas();
					as.setCity(areas.get(i).getCity());
					as.setProvince(areas.get(i).getProvince());
					as.setCountry(areas.get(i).getCountry());
					temAreas.add(as);
				}
				mse.setAreas(replace(temAreas));

			} else {
				mse.setTemAreas(null);
			}
			mse.setConditionLevel(getAddress(userLevels));
			
			list2.add(mse);

		}
		return list2;
	}
	
	private String getAddress(List<String> userLevels){
		
		String[] str = new String[4];
		if (userLevels != null) {
			for (int i = 0; i < userLevels.size(); i++) {
				if ("1".equals(userLevels.get(i))) {
					str[0] = "新晋\t";
				}
				if ("2".equals(userLevels.get(i))) {
					str[1] = "进阶\t";
				}
				if ("3".equals(userLevels.get(i))) {
					str[2] = "高级\t";
				}
				if ("4".equals(userLevels.get(i))) {
					str[3] = "VIP";
				}
			}

			if (str[0] == null) {
				str[0] = "";
			}
			if (str[1] == null) {
				str[1] = "";
			}
			if (str[2] == null) {
				str[2] = "";
			}
			if (str[3] == null) {
				str[3] = "";
			}

			return str[0] + str[1] + str[2] + str[3];
		}
		 return "";
	}
	public String replace(List<Areas> areas) {
		String str = "";
		if (!CheckUtils.isNullOrEmpty(areas)) {

			String[] address = new String[areas.size()];
			for (int i = 0; i < areas.size(); i++) {
				areas.get(i).getCountry();
				areas.get(i).getProvince();
				areas.get(i).getCity();
				address[i] = areas.get(i).getCountry() + "\t"
						+ areas.get(i).getProvince() + "\t"
						+ areas.get(i).getCity() + "\t";
				str += address[i];
			}
		}
		return str;
	}
	
	@AuthRequired(permission = "wx.push.special")
	@RequestMapping(value = "/special", method = RequestMethod.POST)
	public RestResult special(@RequestBody MassCommonDto massCommonDto) {
		massCommonDto.setCreateUser(getAdminId());
		massCommonDto.setStatus("0");
		massCommonDto.setMediaFlag("2");
		RestResult rett = new RestResult();
		try {
			massCommonService.create(massCommonDto);
			rett.setMessage(messageHelper.mesg_info_0001);
		} catch (Exception e) {
			rett.setMessage(messageHelper.mesg_error_0001);
		}
		return rett;
	}

}
