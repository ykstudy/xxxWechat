package com.qiaohu.wechat.admin.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.github.pagehelper.Page;
import com.qiaohu.wechat.admin.BaseController;
import com.qiaohu.wechat.admin.RestResult;
import com.qiaohu.wechat.admin.auth.AuthRequired;
import com.qiaohu.wechat.admin.dto.BasePage;
import com.qiaohu.wechat.common.utils.CheckUtils;
import com.qiaohu.wechat.common.utils.DateUtils;
import com.qiaohu.wechat.constants.Constants;
import com.qiaohu.wechat.core.entity.MassSendAB;
import com.qiaohu.wechat.core.entity.extend.MassSendABExt;
import com.qiaohu.wechat.core.exception.AppException;
import com.qiaohu.wechat.core.service.IMassSendABService;
import com.qiaohu.wechat.helper.ImageHelper;

@RestController
@RequestMapping("/groupsetting")
public class MassSendABController extends BaseController {


	@Autowired
	private IMassSendABService massSendABService;

	@Autowired
	private ImageHelper imageHelper;

	/**
	 * 一览画面数据取得，返回RestResult对象
	 */
	@AuthRequired(permission = "wx.groupsetting.list")
	@RequestMapping(value = "/list", method = RequestMethod.POST)
	public RestResult list(@RequestBody MassSendABExt massSendABExt) {

		Page<MassSendAB> list = null;
		try {
			// 返回查询结果
			list = massSendABService.search(massSendABExt);

			if (CheckUtils.isNullOrEmpty(list.getResult())
					&& massSendABExt.getPage() > 0) {
				massSendABExt.setPage(0);
				list = massSendABService.search(massSendABExt);
			}
			return new RestResult(new BasePage(list.getTotal(),
					list.getResult()));
		} catch (AppException e) {
			logger.error(e.getMessage(), e);
			// 返回异常信息
			return new RestResult(e.getMessage());
		}
	}

	@AuthRequired(permission = "wx.groupsetting.create")
	@RequestMapping(value = "/create", method = RequestMethod.POST)
	public RestResult create(@RequestBody MassSendABExt massSendABExt) {

		try {
			// 创建者
			String aid = getAdminId();
			// 设置创建者
			massSendABExt.setCreateUser(aid);
			// 设置创建时间
			massSendABExt.setCreateDate(DateUtils.getCreateDate(DateUtils
					.getNowTimestamp()));
			
			// 设置累积发货次数范围的最小次数
			if (!CheckUtils.isNull(massSendABExt.getDeliverTimesLow())) {
				massSendABExt.setDeliverTimesLow(massSendABExt
						.getDeliverTimesLow());
			}
			// 设置累积发货次数范围的最大次数
			if (!CheckUtils.isNull(massSendABExt.getDeliverTimesHigh())) {
				massSendABExt.setDeliverTimesHigh(massSendABExt
						.getDeliverTimesHigh());
			}
			// 设置推送状态0：待处理
			massSendABExt.setStatus(Constants.NORMAL_STATUS);

			// 保存A组图文图片到本地
			//String imagePathA= 
			imageHelper.saveImage(
					massSendABExt.getImageA(), massSendABExt.getMediaIdA(),
					Constants.MASSSEND);
			//massSendABExt.setImageA(imagePathA);

			// 保存B组图文图片到本地
			//String imagePathB = 
			imageHelper.saveImage(
					massSendABExt.getImageB(), massSendABExt.getMediaIdB(),
					Constants.MASSSEND);
			// massSendABExt.setImageB(imagePathB);

			if (!CheckUtils.isNullOrEmpty(massSendABExt.getProdgrname())) {
				if (massSendABExt.getProdgrname().equals("月龄版")) {
					massSendABExt
							.setProdgrname(massSendABExt.getProdIdExtOne());
				}
			}
			
			massSendABExt.setId(DateUtils.getStringTimeTwo(DateUtils
					.getNowTimestamp()));
			int ret = massSendABService.insert(massSendABExt);
			if (ret > Constants.SUCCESS) {
				return new RestResult(Constants.SUCCESS,
						messageHelper.mesg_info_0001);
			} else {
				return new RestResult(messageHelper.mesg_error_0001);
			}

		} catch (AppException e) {
			logger.error(messageHelper.mesg_error_0001, e);
			return new RestResult(messageHelper.mesg_error_0001);
		}
	}

	/**
	 * 根据id查询 详细画面
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/detail", method = RequestMethod.GET)
	public RestResult detail(String id) {
		try {
			MassSendAB massSendAB = massSendABService.massSendABDetail(id);

			if (CheckUtils.isNull(massSendAB)) {
				return new RestResult(messageHelper.mesg_info_0007);
			}
			// 根据Id查询对象返回
			return new RestResult(massSendAB);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			// 返回异常信息
			return new RestResult(e.getMessage());
		}
	}

	@AuthRequired(permission = "wx.groupsetting.delete")
	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	public RestResult delete(@RequestBody MassSendABExt massSendABExt) {
		try {
			int result = massSendABService.delete(massSendABExt);
			if (result > Constants.SUCCESS) {
				return new RestResult(Constants.SUCCESS,
						messageHelper.mesg_info_0002);
			} else {
				return new RestResult(messageHelper.mesg_error_0001);
			}
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			// 返回异常信息
			return new RestResult(e.getMessage());
		}
	}
}
