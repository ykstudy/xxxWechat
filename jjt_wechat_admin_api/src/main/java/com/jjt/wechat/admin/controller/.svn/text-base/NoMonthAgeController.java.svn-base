package com.qiaohu.wechat.admin.controller;

import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.github.pagehelper.Page;
import com.qiaohu.wechat.admin.BaseController;
import com.qiaohu.wechat.admin.RestResult;
import com.qiaohu.wechat.admin.auth.AuthRequired;
import com.qiaohu.wechat.admin.dto.BasePage;
import com.qiaohu.wechat.common.utils.CheckUtils;
import com.qiaohu.wechat.common.utils.DateUtils;
import com.qiaohu.wechat.constants.Constants;
import com.qiaohu.wechat.core.entity.MassSendNomem;
import com.qiaohu.wechat.core.entity.extend.MassSendNomemExt;
import com.qiaohu.wechat.core.exception.AppException;
import com.qiaohu.wechat.core.service.IMassSendNomemService;

@RestController
@RequestMapping("/noMonthAge")
public class NoMonthAgeController extends BaseController {

	@Autowired
	private IMassSendNomemService massSendNomemService;
	
	/**
	 * 
	 * @param massExt
	 * @return
	 */
	@AuthRequired(permission = "wx.noMonthAge.list")
	@RequestMapping(value = "/list", method = RequestMethod.POST)
	public RestResult list(@RequestBody MassSendNomemExt massSendNomemExt) {
		// 定义分页集合
		Page<MassSendNomem> list = null;
		if (!CheckUtils.isNullOrEmpty(massSendNomemExt.getPushStatus())) {
			massSendNomemExt.setStatus(massSendNomemExt.getPushStatus());
		}
		try {
			list = queryMassSendNomemList(massSendNomemExt);
			if (CheckUtils.isNull(list)) {
				list = new Page<MassSendNomem>();
			}
			// 返回参数
			return new RestResult(new BasePage(list.getTotal(), list.getResult()));
		} catch (AppException e) {
			logger.error(e.getMessage(), e);
			// 返回异常信息
			return new RestResult(messageHelper.mesg_info_0007);
		}
	}

	@AuthRequired(permission = "wx.noMonthAge.create")
	@RequestMapping(value = "/create", method = RequestMethod.POST)
	public RestResult create(@RequestBody MassSendNomemExt massSend) {
		try {
			String createUser = getAdminId();
			massSend.setCreateUser(createUser);
			massSend.setCreateTime(DateUtils.getCreateDate(DateUtils.getNowTimestamp()));
			massSend.setStatus(Constants.NORMAL_STATUS);
			return createMassSendNomem(massSend) > Constants.SUCCESS ?
			new RestResult(Constants.SUCCESS,messageHelper.mesg_info_0001) :
			new RestResult(messageHelper.mesg_error_0001);
		} catch (AppException e) {
			logger.error(messageHelper.mesg_error_0001, e);
			return new RestResult(messageHelper.mesg_error_0001);
		}

	}

	@AuthRequired(permission = "wx.noMonthAge.update")
	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public RestResult update(@RequestBody MassSendNomemExt massSend) {
		//获取当前时间
		String nowDate = DateUtils.format(new Date(), "yyyy-MM-dd");
		if(getStringDate(massSend.getSendDate().toString())<=getStringDate(nowDate)) {
			return new RestResult(messageHelper.mesg_error_0009);
		}
		return updateMassSendNomem(massSend) > Constants.SUCCESS ?
		new RestResult(Constants.SUCCESS,messageHelper.mesg_info_0003) :
		new RestResult(messageHelper.mesg_info_0005);
	}

	@AuthRequired(permission = "wx.noMonthAge.delete")
	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	public RestResult delete(@RequestBody MassSendNomemExt massSend) {
		return deleteMassSendNomem(massSend) > Constants.SUCCESS ?
		new RestResult(Constants.SUCCESS,messageHelper.mesg_info_0002) :
		new RestResult(messageHelper.mesg_info_0006);
	}

	/*
	 * 详情数据 入力值为openId
	 */
	@RequestMapping(value = "/detail", method = RequestMethod.GET)
	public RestResult detail(int id) {
		MassSendNomem massSend = queryMassSendNomem(id);
		// 根据Id查询对象返回
		return CheckUtils.isNull(massSend) ?
		new RestResult(messageHelper.mesg_info_0007) :
		new RestResult(massSend);
	}

	/**
	 * 发布数据给预览组：改变deleteFlag的状态值为2
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/publish", method = RequestMethod.GET)
	public RestResult publish(int id) {

		MassSendNomem massSend = null;
		try {

			massSend = massSendNomemService.massSendDetail(id);
			// 发布改变deleteFlag的值为2
			massSend.setStatus(Constants.DF_TWO);
			int ret = massSendNomemService.update(massSend);
			if (ret > Constants.SUCCESS) {
				RestResult rett = new RestResult();
				rett.setMessage(messageHelper.mesg_info_0805);
				return rett;
			} else {
				return new RestResult(messageHelper.mesg_info_0806);
			}

		} catch (AppException e) {
			return new RestResult(e.getMessage());
		}

	}
	
	private int createMassSendNomem(MassSendNomemExt massSend) {
		try {
			return massSendNomemService.insert(massSend);
		} catch (Exception e) {
			logger.error("添加年龄推送失败");
			logger.error(e.getMessage());
			return 0;
		}
	}
	
	private int deleteMassSendNomem(MassSendNomemExt massSend) {
		try {
			massSend.setSendDate(null);
			massSend.setMediaId(Constants.BLANK_STR);
			massSend.setTitle(Constants.BLANK_STR);
			massSend.setImage(Constants.BLANK_STR);
			massSend.setStatus(Constants.STR_ZERO);
			massSend.setModifyTime(null);
			massSend.setCreateUser(getAdminId());
			return massSendNomemService.update(massSend);
		} catch (Exception e) {
			logger.error("删除年龄推送失败");
			logger.error(e.getMessage());
			return 0;
		}
	}
	
	private int updateMassSendNomem(MassSendNomemExt massSend) {
		try {
			//推送状态，默认为0：未推送
			massSend.setStatus(Constants.NORMAL_STATUS);
			massSend.setCreateUser(getAdminId());
			massSend.setModifyTime(DateUtils.getCreateDate(DateUtils.getNowTimestamp()));
			return massSendNomemService.update(massSend);
		} catch (Exception e) {
			logger.error("更新年龄推送失败");
			logger.error(e.getMessage());
			return 0;
		}
	}
	
	private MassSendNomem queryMassSendNomem(int id) {
		try {
			return massSendNomemService.massSendDetail(id);
		} catch (Exception e) {
			logger.error("查询年龄推送失败");
			logger.error(e.getMessage());
			return null;
		}
	}
	
	private Page<MassSendNomem> queryMassSendNomemList(MassSendNomemExt massSend) {
		try {
			massSend.setCreateFlag(Constants.THREE);
			return massSendNomemService.search(massSend);
		} catch (Exception e) {
			logger.error("查询非月龄信息失败");
			logger.error(e.getMessage());
			return null;
		}
	}
	
	public static Integer getStringDate(String str) {
		String finalStr = Constants.BLANK_STR; 
		if(!CheckUtils.isNullOrEmpty(str)) {
			//2018-01-12
			String s1 =str.substring(0, 4);
			String s2 =str.substring(5, 7);
			String s3 = str.substring(8, 10);
			finalStr =s1+s2+s3;
		}
		int result = Integer.parseInt(finalStr);
		return result;
	}

}
