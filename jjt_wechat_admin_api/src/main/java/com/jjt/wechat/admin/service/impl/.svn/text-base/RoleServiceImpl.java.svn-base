package com.qiaohu.wechat.admin.service.impl;

import java.sql.Timestamp;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.qiaohu.wechat.admin.service.IRoleService;
import com.qiaohu.wechat.common.utils.CheckUtils;
import com.qiaohu.wechat.common.utils.DateUtils;
import com.qiaohu.wechat.constants.Constants;
import com.qiaohu.wechat.core.dao.AuthorityDao;
import com.qiaohu.wechat.core.dao.RoleDao;
import com.qiaohu.wechat.core.entity.Authority;
import com.qiaohu.wechat.core.entity.Role;
import com.qiaohu.wechat.core.entity.extend.RoleExt;
import com.qiaohu.wechat.core.exception.AppException;
import com.qiaohu.wechat.helper.MessageHelper;

import tk.mybatis.mapper.entity.Example;
import tk.mybatis.mapper.entity.Example.Criteria;

@Service("roleService")
public class RoleServiceImpl implements IRoleService {

	private static Logger logger = LoggerFactory
			.getLogger(RoleServiceImpl.class);
	@Autowired
	private RoleDao roleDao;
	@Autowired
	private AuthorityDao authorityDao;
	@Autowired
	private MessageHelper messageHelper;
//	@Autowired
//	private DataSourceTransactionManager txManager;

	@Override
	public Page<Role> searchAll(RoleExt roleExt) throws AppException {
		// 查询所有角色
		Page<Role> lista = null;
		// 查询条件做成
		Example example = new Example(Role.class);
		Criteria criteria = example.createCriteria();

		// 超级管理员角色不能被查询出来
		criteria.andNotEqualTo("roleId", Constants.ZERO + "");
		try {
			PageHelper.startPage(roleExt.getPage(), roleExt.getCount());
			lista = (Page<Role>)roleDao.selectByExample(example);
			if (CheckUtils.isNullOrEmpty(lista)) {
				return new Page<Role>();
			}
			return lista;
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			throw new AppException(messageHelper.mesg_error_0001, e);
		}
	}

	@Override
	@Transactional
	public int create(Role role, List<Authority> permissions)
			throws AppException {
		// 新增角色
		try {
			// 插入权限信息
			for (Authority authority : permissions) {
				authorityDao.insert(authority);
			}
			//authorityDao.insertList(permissions);
			// 插入角色信息
			return roleDao.insert(role);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			throw new AppException(messageHelper.mesg_error_0001, e);
		}
	}

	@Override
	@Transactional
	public int update(Role role, List<Authority> permissions)
			throws AppException {
		// 更新角色
		Timestamp tt = null;

		try {
			// 删除指定角色的权限
			Example aexample = new Example(Authority.class);
			Criteria acriteria = aexample.createCriteria();
			acriteria.andEqualTo("roleId", role.getRoleId());
			authorityDao.deleteByExample(aexample);
			// 插入权限信息
			for (Authority authority : permissions) {
				authority.setRoleId(role.getRoleId());
				authorityDao.insert(authority);
			}
			Example rexample = new Example(Role.class);
			tt = role.getModifyDate();

			Criteria criteria = rexample.createCriteria();
			criteria.andEqualTo("roleId", role.getRoleId());
			criteria.andEqualTo("modifyDate", tt);
			role.setModifyDate(DateUtils.getNowTimestamp());

			return roleDao.updateByExample(role, rexample);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			throw new AppException(messageHelper.mesg_error_0001, e);
		}
	}

	@Override
	@Transactional
	public int delete(Role role) throws AppException {
		// 删除角色
		try {
			int result =roleDao.deleteByRole(role.getRoleId());
			
			if(result > Constants.SUCCESS) {
				// 删除指定角色的权限
				Example example = new Example(Authority.class);
				Criteria criteria = example.createCriteria();
				criteria.andEqualTo("roleId", role.getRoleId());
				int ret = authorityDao.deleteByExample(example);
				if(ret >  Constants.SUCCESS) {
					return ret;
				}
			}
			return -1;
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			throw new AppException(messageHelper.mesg_error_0001, e);
		}
	}

	@Override
	public Role detail(String roleId) throws AppException {

		try {
			return roleDao.selectByPrimaryKey(roleId);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			throw new AppException(messageHelper.mesg_error_0001, e);
		}
	}

}
