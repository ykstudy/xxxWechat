package com.qiaohu.wechat.admin.controller;

import java.util.Date;
import java.util.List;

import org.apache.commons.lang.time.DateFormatUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.github.pagehelper.Page;
import com.qiaohu.wechat.admin.BaseController;
import com.qiaohu.wechat.admin.RestResult;
import com.qiaohu.wechat.admin.auth.AuthRequired;
import com.qiaohu.wechat.admin.dto.BasePage;
import com.qiaohu.wechat.common.api.MaterialAPI;
import com.qiaohu.wechat.common.api.enums.MaterialType;
import com.qiaohu.wechat.common.api.response.GetMaterialListResponse;
import com.qiaohu.wechat.common.api.response.GetMaterialTotalCountResponse;
import com.qiaohu.wechat.common.utils.CheckUtils;
import com.qiaohu.wechat.common.utils.DateUtils;
import com.qiaohu.wechat.constants.Constants;
import com.qiaohu.wechat.core.entity.MassSend;
import com.qiaohu.wechat.core.entity.MaterialItem;
import com.qiaohu.wechat.core.entity.extend.MassSendExt;
import com.qiaohu.wechat.core.exception.AppException;
import com.qiaohu.wechat.core.service.IMassSendService;
import com.qiaohu.wechat.helper.ImageHelper;

@RestController
@RequestMapping("/deliverTime")
public class DeliverTimeController extends BaseController {

	@Autowired
	private IMassSendService massService;

	@Autowired
	private ImageHelper imageHelper;

	/**
	 * 
	 * @param massExt
	 * @return
	 */
	@AuthRequired(permission = "wx.deliverTime.list")
	@RequestMapping(value = "/list", method = RequestMethod.POST)
	public RestResult list(@RequestBody MassSendExt massExt) {
		
		//定义分页集合
		Page<MassSend> list = null;
		
		//开始时间
		if (!CheckUtils.isNull(massExt.getStartDate())) {
			long st = massExt.getStartDate().getTime();
			massExt.setStartDate(DateUtils.parse(
			DateFormatUtils.format(new Date(st), "yyyy-MM-dd 00:00:00"),
			DateUtils.YMDHHMMSS));
		}
		
		//结束时间比较
		if (!CheckUtils.isNull(massExt.getEndDate())) {
			long et = massExt.getEndDate().getTime();
			massExt.setEndDate(DateUtils.parse(
					DateFormatUtils.format(new Date(et), "yyyy-MM-dd 23:59:59"),
					DateUtils.YMDHHMMSS));
		}
		
		
		
		if (!CheckUtils.isNull(massExt.getEndDate())
				&& !CheckUtils.isNull(massExt.getStartDate())) {
			if (!DateUtils.comparable(massExt.getStartDate(),
					massExt.getEndDate())) {

				return new RestResult(messageHelper.mesg_info_0019);
			}

		}
		
		
		try {
			// 模糊查询推送状态：已发送
			if (!CheckUtils.isNullOrEmpty(massExt.getPushStatus())) {
				massExt.setStatus(massExt.getPushStatus());
			}
			list = massService.search2(massExt);
			if (CheckUtils.isNullOrEmpty(list.getResult())
					&& massExt.getPage() > 0) {
				massExt.setPage(0);
				list = massService.search2(massExt);
			}

			// 返回参数
			return new RestResult(new BasePage(list.getTotal(),
					list.getResult()));
		} catch (AppException e) {
			logger.error(e.getMessage(), e);
			// 返回异常信息
			return new RestResult(e.getMessage());
		}

	}

	@AuthRequired(permission = "wx.deliverTime.create")
	@RequestMapping(value = "/create", method = RequestMethod.POST)
	public RestResult create(@RequestBody MassSendExt massSend) {

		try {
			String aid = getAdminId();
			massSend.setCreateUser(aid);
			massSend.setCreateDate(DateUtils.getCreateDate(DateUtils
					.getNowTimestamp()));

			if (!CheckUtils.isNull(massSend.getDeliverTimesLow())) {
				massSend.setDeliverTimesLow(massSend.getDeliverTimesLow());
			}

			if (!CheckUtils.isNull(massSend.getDeliverTimesHigh())) {
				massSend.setDeliverTimesHigh(massSend.getDeliverTimesHigh());
			}

			massSend.setStatus(Constants.NORMAL_STATUS);

			// 保存图文图片到本地
			//String imagePath = imageHelper.saveImage(massSend.getImage(),
					//massSend.getMediaId(), Constants.MASSSEND);
			// massSend.setImage(imagePath);

			// 设置区分数据的来源send_flag 1:表示原群推管理新增的数据 2：表示累积发货次数
			massSend.setSendFlag(Constants.STR_TWO);
			int ret = massService.insert(massSend);
			if (ret > Constants.SUCCESS) {
				return new RestResult(Constants.SUCCESS,
						messageHelper.mesg_info_0001);
			} else {
				return new RestResult(messageHelper.mesg_error_0001);
			}

		} catch (AppException e) {
			logger.error(messageHelper.mesg_error_0001, e);
			return new RestResult(messageHelper.mesg_error_0001);
		}

	}

	@AuthRequired(permission = "wx.deliverTime.update")
	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public RestResult update(@RequestBody MassSendExt massSend) {
		try {

			if (CheckUtils.isUrl(massSend.getImage())) {

				// 保存图文图片到本地
				String imagePath = imageHelper.saveImage(massSend.getImage(),
						massSend.getMediaId(), Constants.MASSSEND);
				massSend.setImage(imagePath);
			}

			int ret = massService.update(massSend);
			if (ret > Constants.SUCCESS) {

				return new RestResult(Constants.SUCCESS,
						messageHelper.mesg_info_0003);
			} else {
				return new RestResult(messageHelper.mesg_info_0005);
			}
		} catch (AppException e) {
			logger.error(messageHelper.mesg_error_0001, e);
			return new RestResult(messageHelper.mesg_error_0001);
		}

	}

	@AuthRequired(permission = "wx.deliverTime.delete")
	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	public RestResult delete(@RequestBody MassSendExt massSend) {

		try {
			int ret = massService.delete(massSend);
			if (ret > Constants.SUCCESS) {
				return new RestResult(Constants.SUCCESS,
						messageHelper.mesg_info_0002);
			} else {
				return new RestResult(messageHelper.mesg_info_0006);
			}

		} catch (AppException e) {
			logger.error(e.getMessage(), e);
			return new RestResult(messageHelper.mesg_error_0001);
		}
	}

	/*
	 * 详情数据 入力值为openId
	 */
	@RequestMapping(value = "/detail", method = RequestMethod.GET)
	public RestResult detail(String id) {
		try {
			MassSend massSend = massService.massSendDetail(id);
			
			if (CheckUtils.isNull(massSend)) {
				return new RestResult(messageHelper.mesg_info_0007);
			}
			//******************从微信公众号端获取次图文 start by liubo 2017-12-25***************
			//获取次图文
			MaterialAPI materialAPI = imageHelper.getMaterialAPI();
			GetMaterialTotalCountResponse gt = materialAPI.countMaterial();//获取图文素材的总数量
			GetMaterialListResponse res = materialAPI.batchGetMaterialAll(
								MaterialType.NEWS, 0,gt.getNews());
			List<MaterialItem> list = imageHelper.getMaterialImage(res);
			//获取该头图文对应的子图文
			MaterialItem materialItem = getSonItemListByMediaId(list, massSend.getMediaId());
			//******************从微信公众号端获取次图文 end by liubo 2017-12-25***************
			if(!CheckUtils.isNullOrEmpty(materialItem.getSonItemList())) {
				massSend.setSonItemList(materialItem.getSonItemList());
			}
			// 根据Id查询对象返回
			return new RestResult(massSend);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			// 返回异常信息
			return new RestResult(e.getMessage());
		}

	}

	private  MaterialItem  getSonItemListByMediaId(List<MaterialItem> list, String mediaId) {
		
		if(!CheckUtils.isNullOrEmpty(list)){
			
			for (MaterialItem materialItem : list) {
				if((materialItem.getMedia_id()).contains(mediaId)){
					return materialItem;
				}
			}
		}
		return null;
		
	}

	/**
	 * 发布数据给预览组：改变deleteFlag的状态值为2
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/publish", method = RequestMethod.GET)
	public RestResult publish(String id) {

		MassSend massSend = null;
		try {

			massSend = massService.massSendDetail(id);
			// 发布改变deleteFlag的值为2
			massSend.setStatus(Constants.DF_TWO);
			int ret = massService.update(massSend);
			if (ret > Constants.SUCCESS) {
				RestResult rett = new RestResult();
				rett.setMessage(messageHelper.mesg_info_0805);
				return rett;
			} else {
				return new RestResult(messageHelper.mesg_info_0806);
			}

		} catch (AppException e) {
			return new RestResult(e.getMessage());
		}

	}

}
