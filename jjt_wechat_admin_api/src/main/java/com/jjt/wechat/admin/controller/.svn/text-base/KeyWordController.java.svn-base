package com.qiaohu.wechat.admin.controller;

import java.io.File;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.github.pagehelper.Page;
import com.qiaohu.wechat.admin.BaseController;
import com.qiaohu.wechat.admin.RestResult;
import com.qiaohu.wechat.admin.auth.AuthRequired;
import com.qiaohu.wechat.admin.dto.BasePage;
import com.qiaohu.wechat.admin.enums.KeyWordExtType;
import com.qiaohu.wechat.admin.enums.KeyWordType;
import com.qiaohu.wechat.admin.enums.ReplyType;
import com.qiaohu.wechat.common.api.MaterialAPI;
import com.qiaohu.wechat.common.api.enums.MaterialType;
import com.qiaohu.wechat.common.api.response.GetMaterialListResponse;
import com.qiaohu.wechat.common.api.response.GetMaterialTotalCountResponse;
import com.qiaohu.wechat.common.utils.CheckUtils;
import com.qiaohu.wechat.common.utils.DateUtils;
import com.qiaohu.wechat.config.AppConfig;
import com.qiaohu.wechat.constants.Constants;
import com.qiaohu.wechat.core.constants.ConfigConstants;
import com.qiaohu.wechat.core.entity.Keyword;
import com.qiaohu.wechat.core.entity.MaterialItem;
import com.qiaohu.wechat.core.entity.extend.KeywordExt;
import com.qiaohu.wechat.core.exception.AppException;
import com.qiaohu.wechat.core.service.IKeyWordService;
import com.qiaohu.wechat.core.util.SysPropUtil;
import com.qiaohu.wechat.helper.ImageHelper;


@RestController
@RequestMapping("/keyword")
public class KeyWordController extends BaseController {
		
	@Autowired
	private IKeyWordService keyWordService;
	
	@Autowired
	protected AppConfig appConfig;
	@Autowired
	private ImageHelper imageHelper;

	@AuthRequired(permission = "wx.keyword.list")
	@RequestMapping(value = "/list", method = RequestMethod.POST)
	public RestResult list(@RequestBody KeywordExt para) {
		// 关键字
		if (!CheckUtils.checkPara(para.getKeyword(),
				CheckUtils.CHINESE_LETTER_DIGIT, 100)) {
			return new RestResult(messageHelper.mesg_info_0601);
		}
		Page<Keyword> list = null;
		try {
			para.setType(KeyWordType.KEYWORD.getType());
			// 返回查询结果
			list = keyWordService.search(para);

			if (CheckUtils.isNullOrEmpty(list.getResult())
					&& para.getPage() > 0) {
				para.setPage(0);
				list = keyWordService.search(para);
			}
					
			return new RestResult(new BasePage(list.getTotal(),
					list.getResult()));
		} catch (AppException e) {

			// 返回异常信息
			return new RestResult(e.getMessage());
		}

	}

	@AuthRequired(permission = "wx.keyword.create")
	@RequestMapping(value = "/create", method = RequestMethod.POST)
	public RestResult create(@RequestBody Keyword keyword) {
		// 关键字名称
		if (CheckUtils.isNull(keyword.getKeyword())) {
			return new RestResult(messageHelper.mesg_info_0601);
		}
		// 逗号分隔
		String[] strs = keyword.getKeyword().split(",");
		if (CheckUtils.isNull(strs) || strs.length < Constants.ONE) {
			if (!CheckUtils.checkPara(keyword.getKeyword(), 100)) {
				return new RestResult(messageHelper.mesg_info_0601);
			}
		}
		String replyContent = keyword.getReplyContent();
		// 关键字回复内容
		if (!CheckUtils.checkPara(replyContent, 300)) {
			return new RestResult(messageHelper.mesg_info_0602);
		}
		if (keyWordService.detail(keyword.getKeyword()) != null) {
			return new RestResult(messageHelper.mesg_info_0016);
		}
		Timestamp tt = DateUtils.getNowTimestamp();
		List<Keyword> keywords = new ArrayList<Keyword>();
		try {

			String aid = getAdminId();
			String retype = keyword.getReplyType();
			// add image by bobliu start at 2017/07/26
			String image = keyword.getImage();
			String title = keyword.getTitle();
			// add image by bobliu end at 2017/07/26
			if (CheckUtils.isNull(strs) || strs.length < Constants.ONE) {
				keywords.add(keyword);
			} else {
				for (String str : strs) {
					keyword = new Keyword();
					keyword.setType(KeyWordType.KEYWORD.getType());
					keyword.setReplyContent(replyContent);
					keyword.setKeyword(str);
					keyword.setReplyType(retype);
					// add image by bobliu start at 2017/07/26
					if(image!=null){
						keyword.setImage(image);
					}
					if(title!=null){
						keyword.setTitle(title);
					}
					// add image by bobliu end at 2017/07/26
					keyword.setCreateUser(aid);
					keyword.setCreateDate(tt);
					keyword.setModifyUser(aid);
					keyword.setModifyDate(tt);
					keywords.add(keyword);

				}
			}
			save(keywords);

			return new RestResult(Constants.SUCCESS,
					messageHelper.mesg_info_0001);

		} catch (AppException e) {
			return new RestResult(e.getMessage());
		}

	}

	@AuthRequired(permission = "wx.keyword.update")
	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public RestResult update(@RequestBody KeywordExt keyword) {
		// 关键字名称
		if (!CheckUtils.checkPara(keyword.getKeyword(), 100)) {
			return new RestResult(messageHelper.mesg_info_0601);
		}
		// 关键字回复内容
		if (!CheckUtils.checkPara(keyword.getReplyContent(), 300)) {
			return new RestResult(messageHelper.mesg_info_0602);
		}
		try {
			save(keyword, true, keyword.getOldKeyword());
			return new RestResult(Constants.SUCCESS,
					messageHelper.mesg_info_0003);
		} catch (AppException e) {
			return new RestResult(e.getMessage());
		}

	}

	@RequestMapping(value = "/detail", method = RequestMethod.GET)
	public RestResult detail(String id) {

		KeywordExt keywordExt = null;
		try {
			keywordExt = keyWordService.detail(id);
			if (CheckUtils.isNull(keywordExt)) {
				return new RestResult(messageHelper.mesg_info_0007);
			}
			keywordExt.setOldKeyword(keywordExt.getKeyword());
			//******************从微信公众号端获取次图文 start by liubo 2017-12-25***************
			MaterialAPI materialAPI = imageHelper.getMaterialAPI();
			GetMaterialTotalCountResponse gt = materialAPI.countMaterial();//获取图文素材的总数量
			GetMaterialListResponse res = materialAPI.batchGetMaterialAll(
								MaterialType.NEWS, 0,gt.getNews());
			List<MaterialItem> list = imageHelper.getMaterialImage(res);
			//获取该头图文对应的子图文
			MaterialItem materialItem = imageHelper.getSonItemListByMediaId(list, keywordExt.getReplyContent());
			//******************从微信公众号端获取次图文 end by liubo 2017-12-25***************
			//判断是否为null
			if(!CheckUtils.isNullOrEmpty(materialItem.getSonItemList())) {
				keywordExt.setSonItemList(materialItem.getSonItemList());
			}
			return new RestResult(keywordExt);
		} catch (AppException e) {
			return new RestResult(e.getMessage());
		}
	}

	@AuthRequired(permission = "wx.keyword.delete")
	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	public RestResult delete(@RequestBody Keyword keyword) {
		try {
			int ret = keyWordService.delete(keyword);
			if (ret > Constants.SUCCESS) {
				return new RestResult(Constants.SUCCESS,
						messageHelper.mesg_info_0002);
			} else {
				return new RestResult(messageHelper.mesg_info_0006);
			}

		} catch (AppException e) {
			return new RestResult(e.getMessage());
		}

	}

	@Transactional
	private void save(List<Keyword> keywords) throws AppException {
		for (Keyword keyword : keywords) {
			save(keyword, false, null);
		}
	}

	@Transactional
	private void save(Keyword keyword, boolean isUpdate, String oldKey)
			throws AppException {
		int ret = 0;
		try {
			keyword.setModifyUser(getAdminId());
			
			if (ReplyType.TEXT.getType().equals(keyword.getReplyType())) {
				keyword.setTitle(null);
				keyword.setImage(null);
			// add  a judge by bobliu  start at 2017/07/26	
			} else if(ReplyType.MATERIAL.getType().equals(keyword.getReplyType())){	
			// add  a judge by bobliu  end at 2017/07/26
				if (CheckUtils.isUrl(keyword.getImage())) {
					// 保存图文图片到本地
					//String imagePath =
					imageHelper.saveImage(
							keyword.getImage(), keyword.getReplyContent(),
							Constants.KEYWORD);
					//keyword.setImage(imagePath);
				}
			// add  a judge by bobliu start at 2017/07/26	
			}else if(ReplyType.PICTURE.getType().equals(keyword.getReplyType())){
				
				File file = new File(appConfig.userImageSavePath+File.separator+keyword.getTitle());
				String media_Id =keyWordService.getMediaId(file);
				//重新设置replyContent
				if(media_Id==null){
					logger.error("Media_Id获取失败");
					throw new AppException(messageHelper.mesg_info_0007);		
				}
				keyword.setReplyContent(media_Id);
					
			}
			// add  a judge by bobliu end at 2017/07/26
			if (isUpdate) {
				ret = keyWordService.update(keyword, oldKey);
				if (ret <= Constants.SUCCESS) {
					throw new AppException(messageHelper.mesg_info_0005);
				}
			} else {
				ret = keyWordService.insert(keyword);
				if (ret <= Constants.SUCCESS) {
					throw new AppException(messageHelper.mesg_info_0004);
				}
			}

		} catch (AppException e) {
			throw new AppException(messageHelper.mesg_error_0001);
		}

	}

	@RequestMapping(value = "/detailExt", method = RequestMethod.GET)
	public RestResult detailExt(String type) {

		KeywordExt keywordExt = null;
		String replyContent = null;
		try {
			if (KeyWordExtType.REPLY_KEYWORD_DEF.getType().equals(type)) {
				replyContent = SysPropUtil
						.getString(ConfigConstants.REPLY_KEYWORD_DEF);
				replyContent = replyContent.replace("\n", "<br>");
			} else if (KeyWordExtType.REPLY_SUBSCRIBE_WELCOME.getType().equals(
					type)) {
				replyContent = SysPropUtil
						.getString(ConfigConstants.REPLY_SUBSCRIBE_WELCOME);
				replyContent = replyContent.replace("\n", "<br>");
			} else {
				replyContent = SysPropUtil.getString(ConfigConstants.REPLY_FAQ);
			}
			if (CheckUtils.isNull(replyContent)) {
				return new RestResult(messageHelper.mesg_info_0007);
			}
			keywordExt = new KeywordExt();
			keywordExt.setKeyword(type);
			keywordExt.setReplyContent(replyContent);

			return new RestResult(keywordExt);
		} catch (AppException e) {
			return new RestResult(e.getMessage());
		}
	}

	@AuthRequired(permission = "wx.keyword.update")
	@RequestMapping(value = "/updateExt", method = RequestMethod.POST)
	public RestResult updateExt(@RequestBody KeywordExt keyword) {
		// 关键字名称
		if (!CheckUtils.checkParas(keyword.getKeyword(),
				CheckUtils.CHINESE_LETTER_DIGIT, 50)) {
			return new RestResult(messageHelper.mesg_info_0601);
		}
		if (CheckUtils.isNullOrEmpty(keyword.getReplyContent())) {
			return new RestResult(messageHelper.mesg_info_0602);
		}
		// 去除</p><p><br></p><div></div><div> &nbsp;
		String content = keyword.getReplyContent().replace("<br>", "\n");

		content = content.replace("</div><div>", "\n");
		content = content.replace("</p><p>", "\n");

		content = content.replace("<div>", "").replace("</div>", "");

		content = content.replace("<p>", "").replace("</p>", "");
		content = content.replace("&nbsp;", "");

		// 关键字回复内容
		if (!CheckUtils.checkPara(content, 600)) {
			return new RestResult(messageHelper.mesg_info_0602);
		}
		keyword.setReplyContent(content);
		try {
			if (KeyWordExtType.REPLY_KEYWORD_DEF.getType().equals(
					keyword.getKeyword())) {
				keyword.setKeyword(ConfigConstants.REPLY_KEYWORD_DEF);
			} else if (KeyWordExtType.REPLY_SUBSCRIBE_WELCOME.getType().equals(
					keyword.getKeyword())) {
				keyword.setKeyword(ConfigConstants.REPLY_SUBSCRIBE_WELCOME);
			} else {
				keyword.setKeyword(ConfigConstants.REPLY_FAQ);
			}

			int ret = keyWordService.updateExt(keyword);
			if (ret <= Constants.SUCCESS) {
				throw new AppException(messageHelper.mesg_info_0005);
			}
			return new RestResult(Constants.SUCCESS,
					messageHelper.mesg_info_0003);
		} catch (AppException e) {
			return new RestResult(e.getMessage());
		}

	}

}
