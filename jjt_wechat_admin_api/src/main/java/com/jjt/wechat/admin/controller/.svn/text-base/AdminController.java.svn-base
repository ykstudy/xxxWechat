package com.qiaohu.wechat.admin.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.github.pagehelper.Page;
import com.qiaohu.wechat.admin.BaseController;
import com.qiaohu.wechat.admin.RestResult;
import com.qiaohu.wechat.admin.auth.AuthRequired;
import com.qiaohu.wechat.admin.dto.BasePage;
import com.qiaohu.wechat.admin.service.IAdminService;
import com.qiaohu.wechat.common.utils.CheckUtils;
import com.qiaohu.wechat.common.utils.EncryptUtils;
import com.qiaohu.wechat.config.AppConfig;
import com.qiaohu.wechat.constants.Constants;
import com.qiaohu.wechat.core.entity.UserAdmin;
import com.qiaohu.wechat.core.entity.extend.UserAdminCsv;
import com.qiaohu.wechat.core.entity.extend.UserAdminExt;
import com.qiaohu.wechat.core.exception.AppException;

@RestController
@RequestMapping("/adminManager")
public class AdminController extends BaseController {
	
	@Autowired
	protected AppConfig appConfig;

	@Autowired
	private IAdminService adminService;
	
	@AuthRequired(permission = "authority.adminManager.create")
	@RequestMapping(value = "/create", method = RequestMethod.POST)
	public RestResult create(@RequestBody UserAdmin admin) {
		// 画面参数 管理员ID检测

		if (!CheckUtils.checkParas(admin.getAdminId(),
				CheckUtils.LETTERORDIGIT, 20)) {
			return new RestResult(messageHelper.mesg_info_0201);
		}
		// 画面参数 管理员名检测
		if (!CheckUtils.checkParas(admin.getName(),
				CheckUtils.CHINESE_LETTER_DIGIT, 20)) {
			return new RestResult(messageHelper.mesg_info_0202);
		}
		// 画面参数 邮箱检测
		if (!CheckUtils.checkParas(admin.getMail(), CheckUtils.EMAIL, 200)) {
			return new RestResult(messageHelper.mesg_info_0203);
		}
		// 画面参数 角色ID检测
		if (CheckUtils.isNullOrEmpty(admin.getRoleId())) {
			return new RestResult(messageHelper.mesg_info_0204);
		}

		// 画面参数 头像检测
		if (CheckUtils.isNullOrEmpty(admin.getPortrait())) {
			return new RestResult(messageHelper.mesg_info_0205);
		}
		//保存到对应目录
		UserAdmin old= adminService.detail(admin.getAdminId());
		if (old != null) {
			return new RestResult(messageHelper.mesg_info_0207);
		}
		try {
			admin.setModifyUser(getAdminId());
			int ret = adminService.save(admin);
			if (ret > Constants.SUCCESS) {
				return new RestResult(Constants.SUCCESS,
						messageHelper.mesg_info_0001);
			} else {
				return new RestResult(messageHelper.mesg_info_0004);
			}
		} catch (AppException e) {
			return new RestResult(e.getMessage());
		}

	}

	// @AuthRequired(permission = "authority.admin.download")
	@RequestMapping(value = "/download", method = RequestMethod.POST)
	public RestResult download(@RequestBody UserAdminExt para) {

		// 用户名检测
		if (!CheckUtils.checkPara(para.getName(),
				CheckUtils.CHINESE_LETTER_DIGIT, 20)) {
			return new RestResult(messageHelper.mesg_info_0202);
		}
		// 邮箱检测
		String mail = para.getMail();
		if (!CheckUtils.checkMail(mail)) {
			return new RestResult(messageHelper.mesg_info_0203);
		}
		List<UserAdminCsv> list = null;
		try {

			// 返回查询结果
			list = adminService.download(para);
			return new RestResult(list);
		} catch (AppException e) {
			// 返回异常信息
			return new RestResult(e.getMessage());
		}

	}

	@AuthRequired(permission = "authority.adminManager.update")
	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public RestResult update(@RequestBody UserAdmin admin) {

		// 画面参数 管理员名检测
		if (!CheckUtils.checkParas(admin.getName(),
				CheckUtils.CHINESE_LETTER_DIGIT, 20)) {
			return new RestResult(messageHelper.mesg_info_0202);
		}
		// 画面参数 邮箱检测
		if (!CheckUtils.checkParas(admin.getMail(), CheckUtils.EMAIL, 200)) {
			return new RestResult(messageHelper.mesg_info_0203);
		}
		// 画面参数 角色ID检测
		if (CheckUtils.isNullOrEmpty(admin.getRoleId())) {
			return new RestResult(messageHelper.mesg_info_0204);
		}

		// 画面参数 头像检测
		if (CheckUtils.isNullOrEmpty(admin.getPortrait())) {
			return new RestResult(messageHelper.mesg_info_0205);
		}

		try {
			admin.setModifyUser(getAdminId());
			int ret = adminService.update(admin);
			if (ret > Constants.SUCCESS) {
				return new RestResult(Constants.SUCCESS,
						messageHelper.mesg_info_0003);
			} else {
				return new RestResult(messageHelper.mesg_info_0005);
			}
		} catch (AppException e) {
			return new RestResult(messageHelper.mesg_error_0001);
		}

	}

	@AuthRequired(permission = "authority.adminManager.list")
	@RequestMapping(value = "/list", method = RequestMethod.POST)
	public RestResult list(@RequestBody UserAdminExt para) {

		// 用户名检测
		if (!CheckUtils.checkPara(para.getName(),
				CheckUtils.CHINESE_LETTER_DIGIT, 20)) {
			return new RestResult(messageHelper.mesg_info_0202);
		}
		// 邮箱检测
		String mail = para.getMail();
		if (!CheckUtils.checkMail(mail)) {
			return new RestResult(messageHelper.mesg_info_0203);
		}
		Page<UserAdmin> list = null;
		try {
			// 返回查询结果
			list = adminService.search(para);
			// 判断如果结果为空并且不是第一页查询，从第一页开始查询
			if (CheckUtils.isNullOrEmpty(list.getResult())
					&& para.getPage() > 0) {
				para.setPage(0);
				list = adminService.search(para);
			}
			return new RestResult(new BasePage(list.getTotal(),
					list.getResult()));
		} catch (AppException e) {
			// 返回异常信息
			return new RestResult(e.getMessage());
		}

	}

	@RequestMapping(value = "/user/update", method = RequestMethod.POST)
	public RestResult userUpdate(@RequestBody UserAdmin admin) {

		// 画面参数 管理员名检测
		if (!CheckUtils.checkParas(admin.getName(),
				CheckUtils.CHINESE_LETTER_DIGIT, 20)) {
			return new RestResult(messageHelper.mesg_info_0202);
		}
		// 画面参数 邮箱检测
		if (!CheckUtils.checkParas(admin.getMail(), CheckUtils.EMAIL, 200)) {
			return new RestResult(messageHelper.mesg_info_0203);
		}
		// 画面参数 角色ID检测
		if (CheckUtils.isNullOrEmpty(admin.getRoleId())) {
			return new RestResult(messageHelper.mesg_info_0204);
		}

		// 画面参数 头像检测
		if (CheckUtils.isNullOrEmpty(admin.getPortrait())) {
			return new RestResult(messageHelper.mesg_info_0205);
		}

		try {
			// 更新用户信息
			int ret = adminService.update(admin);
			if (ret > Constants.SUCCESS) {
				return new RestResult(Constants.SUCCESS,
						messageHelper.mesg_info_0003);
			} else {
				return new RestResult(messageHelper.mesg_info_0005);
			}

		} catch (AppException e) {
			return new RestResult(messageHelper.mesg_error_0001);
		}

	}

	@RequestMapping(value = "/detail", method = RequestMethod.GET)
	public RestResult detail(String id) {
		UserAdmin admin = null;
		try {
			// 获取用户详细信息
			admin = adminService.detail(id);
			if (CheckUtils.isNull(admin)) {
				return new RestResult(messageHelper.mesg_info_0007);
			}
			return new RestResult(admin);
		} catch (AppException e) {
			return new RestResult(messageHelper.mesg_error_0001);
		}
	}

	@AuthRequired(permission = "authority.admin.delete")
	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	public RestResult delete(@RequestBody UserAdmin admin) {
		try {
			// 删除用户信息
			int ret = adminService.delete(admin);
			if (ret > Constants.SUCCESS) {
				RestResult rett = new RestResult();
				rett.setMessage(messageHelper.mesg_info_0002);
				return rett;
			} else {
				return new RestResult(messageHelper.mesg_info_0006);
			}

		} catch (AppException e) {
			return new RestResult(messageHelper.mesg_error_0001);
		}

	}

	@RequestMapping(value = "/updatePassword", method = RequestMethod.POST)
	public RestResult updatePassword(@RequestBody UserAdminExt admin) {
		
		// 查寻用户是否存在
		UserAdmin nowUser = adminService.select(admin);
		if (CheckUtils.isNull(nowUser)) {
			return new RestResult(messageHelper.mesg_info_0005);
		}
			String oldPwd = nowUser.getPassword();
			String inputPwd =EncryptUtils.encodeMD5(admin.getOldPassword());
		if (!inputPwd.equals(oldPwd)) {
			return new RestResult(messageHelper.mesg_info_0208);
		}
		// 新密码和旧密码比较
		if (admin.getPassword().equals(admin.getOldPassword())) {
			return new RestResult(messageHelper.mesg_info_0206);
		}
		/*String passwordOverdueDate =DateUtils.getStringDate(DateUtils
					.getNowTimestamp());*/
		try {
			//设置当前日期给passwordOverdueDate
			//admin.setPasswordOverdueDate(passwordOverdueDate);
			
			int ret = adminService.updatePassword(admin);
			if (ret > Constants.SUCCESS) {
				return new RestResult(Constants.SUCCESS,
						messageHelper.mesg_info_0008);
			} else {
				return new RestResult(messageHelper.mesg_info_0010);
			}

		} catch (AppException e) {
			return new RestResult(e.getMessage());
		}

	}
	
	@RequestMapping(value = "/updateOldDatePassword", method = RequestMethod.POST)
	public RestResult updateOldDatePassword(@RequestBody UserAdminExt admin) {
		
		// 查寻用户是否存在
		UserAdmin nowUser = adminService.select(admin);
		if (CheckUtils.isNull(nowUser)) {
			return new RestResult(messageHelper.mesg_info_0005);
		}
			String oldPwd = nowUser.getPassword();
			String inputPwd =EncryptUtils.encodeMD5(admin.getOldPassword());
		if (!inputPwd.equals(oldPwd)) {
			return new RestResult(messageHelper.mesg_info_0208);
		}
		// 新密码和旧密码比较
		if (admin.getPassword().equals(admin.getOldPassword())) {
			return new RestResult(messageHelper.mesg_info_0206);
		}
		try {
			int ret = adminService.updatePassword(admin);
			if (ret > Constants.SUCCESS) {
				return new RestResult(Constants.SUCCESS,
						messageHelper.mesg_info_0008);
			} else {
				return new RestResult(messageHelper.mesg_info_0010);
			}

		} catch (AppException e) {
			return new RestResult(e.getMessage());
		}

	}

	@RequestMapping(value = "/restPassword", method = RequestMethod.GET)
	public RestResult restPassword(String id, String adminId) {

		UserAdminExt admin = new UserAdminExt();

		try {

			admin.setAdminId(id);
			admin.setModifyUser(adminId);
			int ret = adminService.restPwd(admin);
			if (ret > Constants.SUCCESS) {
				return new RestResult(Constants.SUCCESS,
						messageHelper.mesg_info_0009);
			} else {
				return new RestResult(messageHelper.mesg_info_0011);
			}

		} catch (AppException e) {
			return new RestResult(messageHelper.mesg_error_0001);
		}

	}

	@RequestMapping(value = "/upload", method = RequestMethod.POST)
	public RestResult upload(
			@RequestParam(value = "file", required = false) MultipartFile file,
			@RequestParam(value = "id") String id) {
		logger.info("para:" + id);
		if (file == null || file.isEmpty())
			return new RestResult(messageHelper.mesg_info_0014);
		String filePath = null;
		try {
			filePath = adminService.uploadImage(file, id);
		} catch (AppException e) {
			logger.error(e.getMessage(), e);
			return new RestResult(e.getMessage());
		}
		RestResult ret = new RestResult();
		ret.setMessage(messageHelper.mesg_info_0012);
		ret.setResult(filePath);

		return ret;

	}
}
