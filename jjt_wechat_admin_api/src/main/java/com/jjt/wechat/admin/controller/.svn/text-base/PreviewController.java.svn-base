package com.qiaohu.wechat.admin.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.github.pagehelper.Page;
import com.qiaohu.wechat.admin.BaseController;
import com.qiaohu.wechat.admin.RestResult;
import com.qiaohu.wechat.admin.auth.AuthRequired;
import com.qiaohu.wechat.admin.dto.BasePage;
import com.qiaohu.wechat.admin.service.IPreviewGroupService;
import com.qiaohu.wechat.admin.service.IPreviewUserService;
import com.qiaohu.wechat.admin.util.UuidUtils;
import com.qiaohu.wechat.common.utils.CheckUtils;
import com.qiaohu.wechat.constants.Constants;
import com.qiaohu.wechat.core.entity.PreviewGroup;
import com.qiaohu.wechat.core.entity.PreviewUser;
import com.qiaohu.wechat.core.entity.extend.PreviewGroupExt;
import com.qiaohu.wechat.core.exception.AppException;

@RestController
@RequestMapping("/preview")
public class PreviewController extends BaseController {

	@Autowired
	private IPreviewGroupService previewGroupService;

	@Autowired
	private IPreviewUserService previewUserService;

	@RequestMapping(value = "/list", method = RequestMethod.POST)
	public RestResult list(@RequestBody PreviewGroupExt para) {

		Page<PreviewGroup> list = null;
		try {
			// 返回查询结果
			list = previewGroupService.search(para);
			if (CheckUtils.isNullOrEmpty(list.getResult())
					&& para.getPage() > 0) {
				para.setPage(0);
				list = previewGroupService.search(para);
			}
			return new RestResult(new BasePage(list.getTotal(),
					list.getResult()));
		} catch (AppException e) {
			// 返回异常信息
			return new RestResult(e.getMessage());
		}

	}
	
	@AuthRequired(permission = "authority.preview.create")
	@RequestMapping(value = "/create", method = RequestMethod.POST)
	public RestResult create(@RequestBody PreviewGroup previewGroup) {
		// 新闻标题检测
		if (CheckUtils.isNullOrEmpty(previewGroup.getName())
				|| previewGroup.getName().length() > 100) {
			return new RestResult(messageHelper.mesg_info_0701);
		}

		try {
			previewGroup.setId(UuidUtils.get32UUId());
			int ret = previewGroupService.insert(previewGroup);
			if (ret > Constants.SUCCESS) {
				return new RestResult(Constants.SUCCESS,
						messageHelper.mesg_info_0001);
			} else {
				return new RestResult(messageHelper.mesg_info_0004);
			}
		} catch (AppException e) {
			return new RestResult(messageHelper.mesg_error_0001);
		}

	}

	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public RestResult update(@RequestBody PreviewGroup previewGroup) {

		try {
			int ret = previewGroupService.update(previewGroup);
			if (ret > Constants.SUCCESS) {
				return new RestResult(Constants.SUCCESS,
						messageHelper.mesg_info_0003);
			} else {
				return new RestResult(messageHelper.mesg_info_0005);
			}
		} catch (AppException e) {
			return new RestResult(messageHelper.mesg_error_0001);
		}

	}

	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	public RestResult delete(@RequestBody PreviewGroup previewGroup) {
		try {

			int ret = previewGroupService.delete(previewGroup);
			if (ret > Constants.SUCCESS) {
				return new RestResult(Constants.SUCCESS,
						messageHelper.mesg_info_0002);
			} else {
				return new RestResult(messageHelper.mesg_info_0006);
			}

		} catch (AppException e) {
			return new RestResult(messageHelper.mesg_error_0001);
		}
	}

	@RequestMapping(value = "/create/user", method = RequestMethod.POST)
	public RestResult createUser(@RequestBody PreviewUser previewUser) {
		// 新闻标题检测
		if (CheckUtils.isNullOrEmpty(previewUser.getOpenId())
				|| previewUser.getOpenId().length() > 30) {
			return new RestResult(messageHelper.mesg_info_0701);
		}
		try {
			int ret = previewUserService.insert(previewUser);
			if (ret > Constants.SUCCESS) {
				return new RestResult(Constants.SUCCESS,
						messageHelper.mesg_info_0001);
			} else {
				return new RestResult(messageHelper.mesg_info_0004);
			}
		} catch (AppException e) {
			return new RestResult(messageHelper.mesg_info_0023);
		}

	}

	@RequestMapping(value = "/delete/user", method = RequestMethod.POST)
	public RestResult deleteUser(@RequestBody PreviewUser previewUser) {
		try {

			int ret = previewUserService.delete(previewUser);
			if (ret > Constants.SUCCESS) {
				return new RestResult(Constants.SUCCESS,
						messageHelper.mesg_info_0002);
			} else {
				return new RestResult(messageHelper.mesg_info_0006);
			}

		} catch (AppException e) {
			return new RestResult(messageHelper.mesg_error_0001);
		}
	}

	@RequestMapping(value = "/detail", method = RequestMethod.GET)
	public RestResult detail(String id) {
		PreviewGroup previewGroup = null;
		try {
			previewGroup = previewGroupService.detail(id);
			if (CheckUtils.isNull(previewGroup)) {
				return new RestResult(messageHelper.mesg_info_0007);
			}
			return new RestResult(previewGroup);
		} catch (AppException e) {
			return new RestResult(messageHelper.mesg_error_0001);
		}
	}
}
