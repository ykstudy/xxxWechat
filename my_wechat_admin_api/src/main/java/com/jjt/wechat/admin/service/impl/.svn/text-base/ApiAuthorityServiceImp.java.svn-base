package com.qiaohu.wechat.admin.service.impl;

import java.sql.Timestamp;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import tk.mybatis.mapper.entity.Example;
import tk.mybatis.mapper.entity.Example.Criteria;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.qiaohu.wechat.admin.service.IApiAuthorityService;
import com.qiaohu.wechat.common.utils.CheckUtils;
import com.qiaohu.wechat.common.utils.DateUtils;
import com.qiaohu.wechat.core.dao.ApiAuthorityDao;
import com.qiaohu.wechat.core.entity.ApiAuthority;
import com.qiaohu.wechat.core.entity.extend.ApiAuthorityExt;
import com.qiaohu.wechat.core.exception.AppException;
import com.qiaohu.wechat.helper.MessageHelper;

@Service("apiauthorityService")
public class ApiAuthorityServiceImp implements IApiAuthorityService {

	private static final Logger logger = LoggerFactory
			.getLogger(ApiAuthorityServiceImp.class);
	@Autowired
	MessageHelper messageHelper;

	@Autowired
	ApiAuthorityDao apiauthorityDao;

	/*
	 * 一览数据获取
	 */
	@Override
	public Page<ApiAuthority> search(ApiAuthorityExt apiauthorityext)
			throws AppException {
		// 查询条件做成
		Example example = new Example(ApiAuthority.class);
		Criteria criteria = example.createCriteria();
		if (!CheckUtils.isNullOrEmpty(apiauthorityext.getIp())) {
			criteria.andLike("ip", "%" + apiauthorityext.getIp() + "%");
		}
		if (!CheckUtils.isNullOrEmpty(apiauthorityext.getName())) {
			criteria.andLike("name", "%" + apiauthorityext.getName() + "%");
		}
		// 分页查询
		try {
			PageHelper.startPage(apiauthorityext.getPage(),
					apiauthorityext.getCount());
			return (Page<ApiAuthority>) apiauthorityDao
					.selectByExample(example);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			// 异常信息
			throw new AppException(messageHelper.mesg_error_0001, e);
		}
	}

	/*
	 * 新增数据
	 */
	@Override
	public int insert(ApiAuthority apiauthority) throws AppException {
		Timestamp nowTimestamp = null;
		try {
			if (!CheckUtils.isNull(detail(apiauthority.getIp()))) {
				throw new AppException(messageHelper.mesg_info_0016);
			}
			nowTimestamp = DateUtils.getNowTimestamp();
			apiauthority.setCreateUser(apiauthority.getModifyUser());
			apiauthority.setCreateDate(nowTimestamp);
			apiauthority.setModifyDate(nowTimestamp);
			return apiauthorityDao.insert(apiauthority);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			// 异常信息
			throw new AppException(messageHelper.mesg_error_0001, e);
		}

	}

	/*
	 * 获取详细数据
	 */
	@Override
	public ApiAuthority detail(String id) throws AppException {
		try {
			ApiAuthority apiauthority = apiauthorityDao.selectByPrimaryKey(id);
			if (apiauthority != null)
				return apiauthority;
			return null;
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			// 异常信息
			throw new AppException(messageHelper.mesg_error_0001, e);
		}

	}

	/*
	 * 修改数据
	 */
	@Override
	public int update(ApiAuthority apiauthority) throws AppException {
		Timestamp tt = null;
		Example rexample = null;
		Criteria criteria = null;
		try {
			tt = apiauthority.getModifyDate();
			apiauthority.setModifyDate(DateUtils.getNowTimestamp());
			rexample = new Example(ApiAuthority.class);

			criteria = rexample.createCriteria();
			criteria.andEqualTo("ip", apiauthority.getIp());
			criteria.andEqualTo("modifyDate", tt);

			return apiauthorityDao.updateByPrimaryKey(apiauthority);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			// 异常信息
			throw new AppException(messageHelper.mesg_error_0001, e);
		}

	}

	/*
	 * 删除数据
	 */
	@Override
	public int delete(ApiAuthority apiauthority) throws AppException {
		try {
			return apiauthorityDao.deleteByPrimaryKey(apiauthority.getIp());
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			// 异常信息
			throw new AppException(messageHelper.mesg_error_0001, e);
		}

	}

}
