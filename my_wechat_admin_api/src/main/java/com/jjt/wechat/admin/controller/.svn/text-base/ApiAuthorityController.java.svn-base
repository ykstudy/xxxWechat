package com.qiaohu.wechat.admin.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.github.pagehelper.Page;
import com.qiaohu.wechat.admin.BaseController;
import com.qiaohu.wechat.admin.RestResult;
import com.qiaohu.wechat.admin.auth.AuthRequired;
import com.qiaohu.wechat.admin.dto.BasePage;
import com.qiaohu.wechat.admin.service.IApiAuthorityService;
import com.qiaohu.wechat.common.utils.CheckUtils;
import com.qiaohu.wechat.constants.Constants;
import com.qiaohu.wechat.core.entity.ApiAuthority;
import com.qiaohu.wechat.core.entity.extend.ApiAuthorityExt;

@RestController
@RequestMapping("/apiAuthority")
public class ApiAuthorityController extends BaseController {
	
	@Autowired
	private IApiAuthorityService apiauthorityService;

	/*
	 * 一览画面数据取得
	 */
	@AuthRequired(permission = "authority.api.list")
	@RequestMapping(value = "/list", method = RequestMethod.POST)
	public RestResult list(@RequestBody ApiAuthorityExt para) {
		// 画面参数 授权IPCheck
		if (!CheckUtils.checkPara(para.getIp(), CheckUtils.IP, 20)) {
			return new RestResult(messageHelper.mesg_info_0301);
		}
		// 画面参数 授权名称Check
		if (!CheckUtils.checkPara(para.getName(),
				CheckUtils.CHINESE_LETTER_DIGIT, 50)) {
			return new RestResult(messageHelper.mesg_info_0302);
		}
		// 返回数据库内容
		Page<ApiAuthority> list = null;
		try {
			list = apiauthorityService.search(para);
			if (CheckUtils.isNullOrEmpty(list.getResult())
					&& para.getPage() > 0) {
				para.setPage(0);
				list = apiauthorityService.search(para);
			}
		} catch (Exception e) {
			return new RestResult(e.getMessage());
		}
		return new RestResult(new BasePage(list.getTotal(), list.getResult()));
	}

	/*
	 * 新增数据 入力值为对象t_api_authority
	 */
	@AuthRequired(permission = "authority.api.create")
	@RequestMapping(value = "/create", method = RequestMethod.POST)
	public RestResult insert(@RequestBody ApiAuthority apiauthority) {
		// 授权IPCheck
		if (!CheckUtils.checkParas(apiauthority.getIp(), CheckUtils.IP, 20)) {
			return new RestResult(messageHelper.mesg_info_0301);
		}
		// 授权名称Check
		if (!CheckUtils.checkParas(apiauthority.getName(),
				CheckUtils.CHINESE_LETTER_DIGIT, 50)) {
			return new RestResult(messageHelper.mesg_info_0302);
		}
		// APIID Check
		apiauthority.setApiId("apiId");
		// if(!CheckUtils.checkPara(apiauthority.getApiId(),CheckUtils.CHINESE_LETTER_DIGIT,50)){
		// return new RestResult(messageHelper.mesg_info_0010);
		// }
		// APIKEY Check
		apiauthority.setApiKey("apiKey");
		// if(!CheckUtils.checkPara(apiauthority.getApiKey(),CheckUtils.CHINESE_LETTER_DIGIT,50)){
		// return new RestResult(messageHelper.mesg_info_0010);
		// }
		ApiAuthority old = apiauthorityService.detail(apiauthority.getIp());
		if (old != null) {
			return new RestResult(messageHelper.mesg_info_0307);
		}
		try {
			apiauthority.setModifyUser(getAdminId());
			int ret = apiauthorityService.insert(apiauthority);
			if (ret > Constants.SUCCESS) {
				return new RestResult(Constants.SUCCESS,
						messageHelper.mesg_info_0001);
			}
			return new RestResult(messageHelper.mesg_info_0004);
		} catch (Exception e) {
			// 返回异常信息
			return new RestResult(e.getMessage());
		}

	}

	/*
	 * 详情数据 入力值为ip
	 */
	@RequestMapping(value = "/detail", method = RequestMethod.GET)
	public RestResult detail(String id) {
		ApiAuthority apiauthority = null;
		try {
			// 获取授权信息详细
			apiauthority = apiauthorityService.detail(id);
			if (CheckUtils.isNull(apiauthority)) {
				return new RestResult(messageHelper.mesg_info_0007);
			}
			return new RestResult(apiauthority);
		} catch (Exception e) {
			return new RestResult(e.getMessage());
		}
	}

	/*
	 * 更新数据 入力值为t_api_authority
	 */
	@AuthRequired(permission = "authority.api.update")
	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public RestResult update(@RequestBody ApiAuthority apiauthority) {
		// 授权名称Check
		if (!CheckUtils.checkParas(apiauthority.getName(),
				CheckUtils.CHINESE_LETTER_DIGIT, 50)) {
			return new RestResult(messageHelper.mesg_info_0302);
		}
		// APIID Check
		apiauthority.setApiId("apiId");
		// if(!CheckUtils.checkPara(apiauthority.getApiId(),CheckUtils.CHINESE_LETTER_DIGIT,50)){
		// return new RestResult(messageHelper.mesg_info_0010);
		// }
		apiauthority.setApiKey("apiKey");
		// APIKEY Check
		// if(!CheckUtils.checkPara(apiauthority.getApiKey(),CheckUtils.CHINESE_LETTER_DIGIT,50)){
		// return new RestResult(messageHelper.mesg_info_0010);
		// }
		int ret = 0;
		try {
			apiauthority.setModifyUser(getAdminId());
			ret = apiauthorityService.update(apiauthority);
			if (ret > Constants.SUCCESS) {
				return new RestResult(Constants.SUCCESS,
						messageHelper.mesg_info_0003);
			} else {
				return new RestResult(messageHelper.mesg_info_0005);
			}

		} catch (Exception e) {
			// 返回异常信息
			return new RestResult(e.getMessage());
		}
	}

	/*
	 * 删除数据 入力值为整个对象
	 */
	@AuthRequired(permission = "authority.api.delete")
	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	public RestResult delete(@RequestBody ApiAuthority apiauthority) {

		int ret = 0;
		try {
			apiauthority.setModifyUser(getAdminId());
			ret = apiauthorityService.delete(apiauthority);
			if (ret > Constants.SUCCESS) {
				return new RestResult(Constants.SUCCESS,
						messageHelper.mesg_info_0002);
			} else {
				return new RestResult(messageHelper.mesg_info_0006);
			}

		} catch (Exception e) {
			// 返回异常信息
			return new RestResult(e.getMessage());
		}

	}
}
