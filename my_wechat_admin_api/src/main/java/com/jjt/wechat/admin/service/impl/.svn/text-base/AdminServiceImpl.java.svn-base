package com.qiaohu.wechat.admin.service.impl;

import java.io.File;
import java.sql.Timestamp;
import java.util.List;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.qiaohu.wechat.admin.enums.AdminStatus;
import com.qiaohu.wechat.admin.service.IAdminService;
import com.qiaohu.wechat.admin.service.IRoleService;
import com.qiaohu.wechat.admin.util.DateUtil;
import com.qiaohu.wechat.common.utils.CheckUtils;
import com.qiaohu.wechat.common.utils.DateUtils;
import com.qiaohu.wechat.common.utils.EncryptUtils;
import com.qiaohu.wechat.config.AppConfig;
import com.qiaohu.wechat.core.dao.UserAdminDao;
import com.qiaohu.wechat.core.entity.Role;
import com.qiaohu.wechat.core.entity.UserAdmin;
import com.qiaohu.wechat.core.entity.extend.UserAdminCsv;
import com.qiaohu.wechat.core.entity.extend.UserAdminExt;
import com.qiaohu.wechat.core.exception.AppException;
import com.qiaohu.wechat.helper.MessageHelper;

import tk.mybatis.mapper.entity.Example;
import tk.mybatis.mapper.entity.Example.Criteria;

@Service("adminService")
public class AdminServiceImpl implements IAdminService {

	private static final Logger logger = LoggerFactory
			.getLogger(AdminServiceImpl.class);
	@Autowired
	private UserAdminDao userAdminDao;

//	@Autowired
//	private IAuthorityService authorityService;
//
//	@Autowired
//	private AuthorityDao authorityDao;

	@Autowired
	private MessageHelper messageHelper;

	@Autowired
	protected AppConfig appConfig;

	@Autowired
	private IRoleService roleService;

	@Override
	public UserAdmin login(UserAdmin user) throws AppException {

		UserAdmin admin = null;
		int diffDays = 0;
		try {
			admin = userAdminDao.selectByPrimaryKey(user.getAdminId());
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			throw new AppException(messageHelper.mesg_error_0001, e);
		}
		// 用户不存在
		if (CheckUtils.isNull(admin)) {
			throw new AppException(messageHelper.mesg_info_0108);
		}
		// 密码错误
		if (!EncryptUtils.encodeMD5(user.getPassword()).equals(
				admin.getPassword())) {
			throw new AppException(messageHelper.mesg_info_0108);
		}
		// 用户已经被删除
		if (AdminStatus.DELETE.getStatus().equals(admin.getDeleteFlag())) {
			throw new AppException(messageHelper.mesg_info_0108);
		}
		// 用户已经被冻结
		if (AdminStatus.FROZEN.getStatus().equals(admin.getDeleteFlag())) {
			throw new AppException(messageHelper.mesg_info_0107);
		}
		// 过期日期与当前日期相差天数
		diffDays = DateUtil.getdaysBetweenDates( DateUtil
				.parse(admin.getPasswordOverdueDate(), DateUtil.YYYYMMDD),DateUtil.getNow());
		// 密码修改时间已经超过冻结时间
		if (diffDays > appConfig.pwdUpdateKeepDay) {
			// 用户状态是否为冻结状态，不是需要修改为冻结状态
			if (!AdminStatus.FROZEN.getStatus().equals(admin.getDeleteFlag())) {
				// 更新用户状态为已冻结
				admin.setDeleteFlag(AdminStatus.FROZEN.getStatus());
				try {
					updateStatue(admin);
				} catch (Exception e) {
					logger.error(e.getMessage(), e);
					throw new AppException(messageHelper.mesg_error_0001, e);
				}
			}
			throw new AppException(messageHelper.mesg_info_0107);
		}
		// 密码修改时间已经超过密码时间
		if (diffDays > appConfig.pwdKeepDay) {
			admin.setDeleteFlag(AdminStatus.OVERDUE.getStatus());
		}
		admin.setPassword(null);
		return admin;
	}

	@Override
	public int save(UserAdmin admin) throws AppException {
		Timestamp tt = DateUtils.getNowTimestamp();
		admin.setDeleteFlag(AdminStatus.NORMAL.getStatus());
		admin.setCreateUser(admin.getModifyUser());
		admin.setCreateDate(tt);
		admin.setModifyDate(tt);
		try {
			admin.setPasswordOverdueDate(DateUtils
					.getNowFormat(DateUtils.yyyyMMdd));
			admin.setPassword(EncryptUtils.encodeMD5(appConfig.defaultPwd));
			if (!CheckUtils.isNull(detail(admin.getAdminId()))) {
				throw new AppException(messageHelper.mesg_info_0016);
			}
			Role role = roleService.detail(admin.getRoleId());
			if (CheckUtils.isNull(role)) {
				logger.error("用户角色信息为null");
				throw new AppException(messageHelper.mesg_error_0001);
			}
			return userAdminDao.insert(admin);
		} catch (AppException e) {
			logger.error(e.getMessage(), e);
			throw new AppException(messageHelper.mesg_error_0001);
		}

	}

	@Override
	public Page<UserAdmin> search(UserAdminExt req) throws AppException {

		try {
			PageHelper.startPage(req.getPage(), req.getCount());
			return userAdminDao.selectByUser(req);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			throw new AppException(messageHelper.mesg_error_0001, e);
		}

	}

	@Override
	public List<UserAdminCsv> download(UserAdminExt req) throws AppException {
		try {
			return userAdminDao.selectDownByUser(req);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			throw new AppException(messageHelper.mesg_error_0001, e);
		}

	}

	@Override
	public int delete(UserAdmin admin) throws AppException {
		try {
			return userAdminDao.deleteByPrimaryKey(admin.getAdminId());
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			throw new AppException(messageHelper.mesg_error_0001, e);
		}

	}

	@Override
	public int update(UserAdmin admin) throws AppException {

		Timestamp tt = admin.getModifyDate();
		try {
			Role role = roleService.detail(admin.getRoleId());
			if (CheckUtils.isNull(role)) {
				logger.error("用户角色信息为null");
				throw new AppException(messageHelper.mesg_error_0001);
			}
			admin.setModifyDate(DateUtils.getNowTimestamp());
			Example rexample = new Example(UserAdmin.class);
			Criteria criteria = rexample.createCriteria();
			criteria.andEqualTo("adminId", admin.getAdminId());
			criteria.andEqualTo("modifyDate", tt);

			return userAdminDao.updateByExampleSelective(admin, rexample);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			throw new AppException(messageHelper.mesg_error_0001, e);
		}

	}

	@Override
	public UserAdmin detail(String id) throws AppException {
		try {
			UserAdmin userAdmin = userAdminDao.selectById(id);
			if (userAdmin != null) {
				return userAdmin;
			}
			return null;
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			throw new AppException(messageHelper.mesg_error_0001, e);
		}
	}

	@Override
	@Transactional
	public int updatePassword(UserAdminExt req) throws AppException {
		UserAdmin admin = null;
		try {

			// 查寻用户是否存在
			admin = userAdminDao.selectByPrimaryKey(req.getAdminId());
			if (CheckUtils.isNull(admin)) {
				throw new AppException(messageHelper.mesg_info_0005);
			}
			String newPwd = EncryptUtils.encodeMD5(req.getPassword());
			if (admin.getPassword().equals(newPwd)) {
				throw new AppException(messageHelper.mesg_info_0206);
			}
			Timestamp tt = admin.getModifyDate();
			Example example = new Example(UserAdmin.class);
			admin.setPassword(newPwd);
			admin.setPasswordOverdueDate(DateUtils.getStringDate(DateUtils
					.getNowTimestamp()));
			//修改密码时deleteFlag为：0
			admin.setDeleteFlag("0");

			Criteria criteria = example.createCriteria();
			criteria.andEqualTo("adminId", admin.getAdminId());
			criteria.andEqualTo("modifyDate", tt);

			return userAdminDao.updateByExample(admin, example);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			throw new AppException(messageHelper.mesg_error_0001, e);
		}
	}

	@Override
	public int restPwd(UserAdmin admin) throws AppException {
		Timestamp tt = DateUtils.getNowTimestamp();
		admin.setModifyDate(tt);
		try {
			admin.setPassword(EncryptUtils.encodeMD5(appConfig.defaultPwd));
			admin.setModifyDate(DateUtils.getNowTimestamp());
			admin.setPasswordOverdueDate(DateUtils.getStringDate(DateUtils
					.getNowTimestamp()));
			Example rexample = new Example(UserAdmin.class);
			Criteria criteria = rexample.createCriteria();
			criteria.andEqualTo("adminId", admin.getAdminId());

			return userAdminDao.updateByExampleSelective(admin, rexample);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			throw new AppException(messageHelper.mesg_error_0001, e);
		}

	}

	@Override
	public int updateStatue(UserAdmin admin) throws AppException {
		try {
			admin.setModifyDate(DateUtils.getNowTimestamp());
			Example rexample = new Example(UserAdmin.class);
			Criteria criteria = rexample.createCriteria();
			criteria.andEqualTo("adminId", admin.getAdminId());

			return userAdminDao.updateByExampleSelective(admin, rexample);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			throw new AppException(messageHelper.mesg_error_0001, e);
		}

	}

	@Override
	public String uploadImage(MultipartFile file, String id)
			throws AppException {
		long maxSize = appConfig.userImageMaxSize * 1024 * 1024;
		if (file.getSize() > maxSize) {
			throw new AppException(String.format(messageHelper.mesg_info_0015,
					appConfig.userImageMaxSize));
		}

		String fileName = file.getOriginalFilename();
		File targetFile = new File(appConfig.userImageSavePath);
		if (!targetFile.exists()) {
			targetFile.mkdirs();
		}

		String prefix = fileName.substring(fileName.lastIndexOf("."));
		if (CheckUtils.isNullOrEmpty(id)) {
			id = UUID.randomUUID().toString().replace("-", "");
		}
		String filePath = id + prefix;
		// 保存
		try {
			targetFile = new File(appConfig.userImageSavePath + File.separator
					+ filePath);
			if (targetFile.exists()) {
				targetFile.delete();
			}
			logger.info(appConfig.userImageSavePath);
			file.transferTo(new File(appConfig.userImageSavePath
					+ File.separator + filePath));
			return filePath;
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			throw new AppException(messageHelper.mesg_info_0013);
		}

	}

	@Override
	public UserAdmin select(UserAdminExt userAdminExt) throws AppException {
		try {
			UserAdmin userAdmin = userAdminDao.selectByPrimaryKey(userAdminExt.getAdminId());
			if (userAdmin != null) {
				return userAdmin;
			}
			return null;
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			throw new AppException(messageHelper.mesg_error_0001, e);
		}
	}
}
