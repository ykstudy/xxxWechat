package com.qiaohu.wechat.admin.controller;

import java.io.File;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.github.pagehelper.Page;
import com.qiaohu.wechat.admin.BaseController;
import com.qiaohu.wechat.admin.RestResult;
import com.qiaohu.wechat.admin.auth.AuthRequired;
import com.qiaohu.wechat.admin.dto.BasePage;
import com.qiaohu.wechat.admin.service.IUserService;
import com.qiaohu.wechat.admin.util.DateUtil;
import com.qiaohu.wechat.admin.util.ThreadPool;
import com.qiaohu.wechat.common.utils.CheckUtils;
import com.qiaohu.wechat.common.utils.DateUtils;
import com.qiaohu.wechat.config.AppConfig;
import com.qiaohu.wechat.constants.Constants;
import com.qiaohu.wechat.core.constants.ConfigConstants;
import com.qiaohu.wechat.core.entity.UserWeiXin;
import com.qiaohu.wechat.core.entity.extend.UserWeiXinExt;
import com.qiaohu.wechat.core.entity.extend.UserWxCsv;
import com.qiaohu.wechat.core.exception.AppException;
import com.qiaohu.wechat.core.util.CSVUtils;
import com.qiaohu.wechat.core.util.SysPropUtil;


@RestController
@RequestMapping("/user")
public class UserController extends BaseController {
	
	@Autowired
	IUserService userService;
	
	@Autowired
	protected AppConfig appConfig;
	
	/*
	 * 一览画面数据取得 返回一个RestResult对象
	 */
	@AuthRequired(permission = "search.user.list")
	@RequestMapping(value = "/list", method = RequestMethod.POST)
	public RestResult list(@RequestBody UserWeiXinExt user) {
		// 参数检查
		// 用户昵称 英数字或者汉子检查
		if (!CheckUtils.checkPara(user.getNickname(),
				CheckUtils.CHINESE_LETTER_DIGIT, 30)) {
			return new RestResult(messageHelper.mesg_info_1101);
		}
		if (!CheckUtils.checkPara(user.getWebId(),
				CheckUtils.CHINESE_LETTER_DIGIT, 30)) {
			return new RestResult(messageHelper.mesg_info_1102);
		}
		if (!CheckUtils.checkPara(user.getUcode(),
				CheckUtils.CHINESE_LETTER_DIGIT, 30)) {
			return new RestResult(messageHelper.mesg_info_1103);
		}
		if (!CheckUtils.isNullOrEmpty(user.getNickname())) {
			try {
				user.setNickname(URLEncoder.encode(user.getNickname(),"utf-8"));
			} catch (UnsupportedEncodingException e) {
				
			}
		}
		
		// 开始时间和结束时间比较
		if (!CheckUtils.isNull(user.getStartTime())
				&& !CheckUtils.isNull(user.getEndTime())) {

			user.setStartTime(DateUtil.getStartDate(user.getStartTime()));

			user.setEndTime(DateUtil.getEndDate(user.getEndTime()));
			if (!DateUtils.comparable(user.getStartTime(), user.getEndTime())) {
				// 开始日期不是大于结束日期
				return new RestResult(messageHelper.mesg_info_0019);
			}

		}
		try {
			Page<UserWeiXin> list = userService.search(user);
			
			
			if(list.getTotal()>5000){
				return new RestResult(new BasePage(5000,
						list.getResult()));
			}
			return new RestResult(new BasePage(list.getTotal(),
					list.getResult()));
		} catch (AppException e) {
			logger.error(e.getMessage(), e);
			// 返回异常信息
			return new RestResult(e.getMessage());
		}

	}

	/*
	 * 详情数据 入力值为openId
	 */
	@AuthRequired(permission = "search.user.detail")
	@RequestMapping(value = "/detail", method = RequestMethod.GET)
	public RestResult detail(String id) {
		UserWeiXinExt userWeiXin = null;
		try {
			userWeiXin = userService.detail(id);
			if (!CheckUtils.isNull(userWeiXin)
					&& !CheckUtils.isNullOrEmpty(userWeiXin.getOrderDate())) {
				userWeiXin.setOrderDate(DateUtils.formatZHCNDate(userWeiXin.getOrderDate(),
						DateUtils.YYYY_MM_DD));
			}
			// 根据Id查询对象返回
			return new RestResult(userWeiXin);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			// 返回异常信息
			return new RestResult(e.getMessage());
		}

	}

	/*
	 * 
	 */
	@AuthRequired(permission = "search.user.detail")
	@RequestMapping(value = "/searchDetail", method = RequestMethod.POST)
	public RestResult searchDetail(UserWeiXinExt userExt) {

		if (!CheckUtils.checkPara(userExt.getNickname(),
				CheckUtils.CHINESE_LETTER_DIGIT, 30)) {
			return new RestResult(messageHelper.mesg_info_1101);
		}

		if (CheckUtils.isNullOrEmpty(userExt.getWebId())
				&& CheckUtils.isNullOrEmpty(userExt.getUcode())) {
			return new RestResult(messageHelper.mesg_info_1104);
		}

		if (!CheckUtils.checkParas(userExt.getWebId(),
				CheckUtils.CHINESE_LETTER_DIGIT, 30)) {
			return new RestResult(messageHelper.mesg_info_1102);
		}
		if (!CheckUtils.checkParas(userExt.getUcode(),
				CheckUtils.CHINESE_LETTER_DIGIT, 30)) {
			return new RestResult(messageHelper.mesg_info_1103);
		}
		UserWeiXin userWeiXin = null;
		try {
			userWeiXin = userService.searchDetail(userExt);
			if (!CheckUtils.isNull(userWeiXin)
					&& !CheckUtils.isNull(userWeiXin.getOrderDate())) {
				userWeiXin.setOrderDate(DateUtils.formatZHCNDate(userWeiXin.getOrderDate(),
						DateUtils.YYYY_MM_DD));
			}
			// 根据Id查询对象返回
			return new RestResult(userWeiXin);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			// 返回异常信息
			return new RestResult(e.getMessage());
		}

	}
	
	@RequestMapping(value = "/download", method = RequestMethod.POST)
	public RestResult download(@RequestBody UserWeiXinExt para) {

		try {
			

			//获取当前时间
			String nowtime = DateUtils.getStringTimeTwo(DateUtils.getNowTimestamp());
			String filename = nowtime.substring(0, 8)+"_"+nowtime.substring(8, 14);
			//String aid = getAdminId();
			String finalFileName ="微信用户一览_"+filename;
			//生成文件前判断如果文件存在删除已存在文件
			File serviceFile = new File(finalFileName+".csv");
			File serviceTmpFile = new File(finalFileName+".tmp");
			if(serviceFile.isFile()&&serviceFile.exists()){
				serviceFile.delete();
			}	
			if(serviceTmpFile.isFile()&&serviceTmpFile.exists()){
				serviceTmpFile.delete();
			}
			//获取文件保存路径
			String savePath = SysPropUtil.getString(ConfigConstants.WECHAT_USER_CSV_URL);
			//获取线程池对象
			ThreadPool t = ThreadPool.getThreadPool(1);
			t.execute(new Runnable[]{new DownloadTask(para,savePath,finalFileName)});
			logger.info("生成csv文件线程:"+t);
				
			//UserWeiXinExt result = new UserWeiXinExt();
			//result.setCsvFileUrl(finalFileName+".csv");
			return new RestResult(Constants.SUCCESS,finalFileName+".csv文件正在下载，文件较大请等待几分钟！");
			//return new RestResult(result);
		} catch (AppException e) {
			// 返回异常信息
			return new RestResult(e.getMessage());
		}

	}
	
	/**
	 * 线程的任务类
	 * @author Administrator
	 *
	 */
	class DownloadTask extends Thread{
		
		UserWeiXinExt para;
		String savePath;
		String finalFileName;
		File file;
		
		public File getFile() {
			return file;
		}

		public void setFile(File file) {
			this.file = file;
		}

		public DownloadTask() {
			// TODO Auto-generated constructor stub
		}

		public DownloadTask(UserWeiXinExt para, String savePath,
				String finalFileName) {
			super();
			this.para = para;
			this.savePath = savePath;
			this.finalFileName = finalFileName;
		}
		
		@Override
		public void run() {
			super.run();

			List<UserWxCsv> list = null;
			// 返回查询结果
			list = userService.download(para);
			file =CSVUtils.createCSV(list, savePath, finalFileName);
			if(file.isFile()&&file.exists()){
				String fileName =savePath + File.separator + finalFileName + ".csv";
				File finalFile = new File(fileName);
				file.renameTo(finalFile);
				logger.info("CSV文件生成成功！"+"文件名称："+finalFileName);
			}else{
				logger.error("CSV文件生成失败！");
			}
		}
	}
	
	@RequestMapping(value = "/count", method = RequestMethod.POST)
	public RestResult getCount(){
		UserWeiXinExt userWeiXin = null;
		try {
			userWeiXin = userService.selectCount(userWeiXin);
			return new RestResult(userWeiXin);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			// 返回异常信息
			return new RestResult(e.getMessage());
		}
	}
}
