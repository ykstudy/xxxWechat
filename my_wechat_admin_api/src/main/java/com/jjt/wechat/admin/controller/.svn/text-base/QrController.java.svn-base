package com.qiaohu.wechat.admin.controller;

import java.sql.Timestamp;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.time.DateFormatUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.github.pagehelper.Page;
import com.qiaohu.wechat.admin.BaseController;
import com.qiaohu.wechat.admin.RestResult;
import com.qiaohu.wechat.admin.auth.AuthRequired;
import com.qiaohu.wechat.admin.dto.BasePage;
import com.qiaohu.wechat.admin.enums.QrType;
import com.qiaohu.wechat.common.utils.CheckUtils;
import com.qiaohu.wechat.common.utils.DateUtils;
import com.qiaohu.wechat.constants.Constants;
import com.qiaohu.wechat.core.entity.QrTicket;
import com.qiaohu.wechat.core.entity.extend.QrTicketExt;
import com.qiaohu.wechat.core.exception.AppException;
import com.qiaohu.wechat.core.service.IQRService;
import com.qiaohu.wechat.helper.MessageHelper;

@RestController
@RequestMapping("/qr")
public class QrController extends BaseController {

	@Autowired
	private IQRService qrService;
	@Autowired
	private MessageHelper maHelper;

	@AuthRequired(permission = "wx.scene.list")
	@RequestMapping(value = "/list", method = RequestMethod.POST)
	public RestResult list(@RequestBody QrTicketExt para) {
		// 场景描述
		if (!CheckUtils.checkPara(para.getQrName(),
				CheckUtils.CHINESE_LETTER_DIGIT, 20)) {
			return new RestResult(messageHelper.mesg_info_0901);
		}
		// 开始时间和结束时间比较
		if (!CheckUtils.isNull(para.getEndTime())
				&& !CheckUtils.isNull(para.getStartTime())) {

			if (!DateUtils.comparable(para.getStartTime(), para.getEndTime())) {
				// 开始日期不是大于结束日期
				return new RestResult(messageHelper.mesg_info_0019);
			}
		}
		Page<QrTicket> list = null;
		try {
			// 返回查询结果
			list = qrService.search(para);
			if (CheckUtils.isNullOrEmpty(list.getResult())
					&& para.getPage() > 0) {
				para.setPage(0);
				list = qrService.search(para);
			}
			return new RestResult(new BasePage(list.getTotal(),
					list.getResult()));
		} catch (AppException e) {
			// 返回异常信息
			return new RestResult(maHelper.mesg_error_0001);
		}

	}

	@AuthRequired(permission = "wx.scene.create")
	@RequestMapping(value = "/create", method = RequestMethod.POST)
	public RestResult create(@RequestBody QrTicket qrTicket) {

		// 场景描述
		if (!CheckUtils.checkParas(qrTicket.getQrName(),
				CheckUtils.CHINESE_LETTER_DIGIT, 20)) {
			return new RestResult(messageHelper.mesg_info_0901);
		}

		List<QrTicket> sameNameQrs = null;
		try {

			sameNameQrs = qrService.searchByName(qrTicket.getQrName());
			if (!CheckUtils.isNullOrEmpty(sameNameQrs)) {
				return new RestResult(messageHelper.mesg_info_0902);
			}

			if (QrType.PERMANENT.getType().equals(qrTicket.getTempFlag())) {
				qrTicket.setInvalidDate(null);
			} else {
				qrTicket.setInvalidDate(DateUtils
						.getDateAfterDays(Constants.THIRTY));
			}
			qrTicket.setQrName(qrTicket.getQrName());
			String aid = getAdminId();

			Timestamp tt = DateUtils.getNowTimestamp();
			qrTicket.setDeleteFlag(Constants.NORMAL_STATUS);
			qrTicket.setCreateUser(aid);
			qrTicket.setCreateDate(tt);
			qrTicket.setModifyUser(aid);
			qrTicket.setModifyDate(tt);

			int ret = qrService.insert(qrTicket);
			if (ret > Constants.SUCCESS) {
				return new RestResult(Constants.SUCCESS,
						messageHelper.mesg_info_0001);
			} else {
				return new RestResult(messageHelper.mesg_info_0004);
			}

		} catch (AppException e) {
			return new RestResult(e.getMessage());
		}

	}

	@AuthRequired(permission = "wx.scene.update")
	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public RestResult update(@RequestBody QrTicket qrTicket) {
		// 活动名称
		if (!CheckUtils.checkParas(qrTicket.getQrName(),
				CheckUtils.CHINESE_LETTER_DIGIT, 20)) {
			return new RestResult(messageHelper.mesg_info_0901);
		}

		try {
			if (QrType.PERMANENT.getType().equals(qrTicket.getTempFlag())) {

				qrTicket.setInvalidDate(null);
			}
			qrTicket.setModifyUser(getAdminId());
			int ret = qrService.update(qrTicket);
			if (ret > Constants.SUCCESS) {
				return new RestResult(Constants.SUCCESS,
						messageHelper.mesg_info_0003);
			} else {
				return new RestResult(messageHelper.mesg_info_0005);
			}

		} catch (AppException e) {
			return new RestResult(messageHelper.mesg_error_0001);
		}

	}

	@RequestMapping(value = "/detail", method = RequestMethod.GET)
	public RestResult detail(String id) {
		QrTicket qrTicket = null;
		try {
			qrTicket = qrService.detail(id);
			if (CheckUtils.isNull(qrTicket)) {
				return new RestResult(messageHelper.mesg_info_0007);
			}
			if (!CheckUtils.isNull(qrTicket.getInvalidDate())) {
				// qrTicket.setInvalidDate(DateUtils);
				qrTicket.setInvalidDate(DateUtils.parse(DateFormatUtils.format(
						qrTicket.getInvalidDate(), "yyyy-MM-dd 23:59:59"),
						DateUtils.YMDHHMMSS));
			}
			return new RestResult(qrTicket);
		} catch (AppException e) {
			return new RestResult(e.getMessage());
		}
	}

	@AuthRequired(permission = "wx.scene.delete")
	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	public RestResult delete(@RequestBody QrTicket qrTicket) {
		try {
			// 设置删除标志
			qrTicket.setDeleteFlag(Constants.DELETE_STATUS);
			// 更新数据库
			int ret = qrService.update(qrTicket);
			if (ret > Constants.SUCCESS) {
				RestResult rett = new RestResult();
				rett.setMessage(messageHelper.mesg_info_0002);
				return rett;
			} else {
				return new RestResult(messageHelper.mesg_error_0001);
			}

		} catch (AppException e) {
			return new RestResult(e.getMessage());
		}

	}
	
	@AuthRequired(permission = "wx.scene.all")
	@RequestMapping(value = "/all", method = RequestMethod.POST)
	public RestResult all(@RequestBody QrTicketExt para) {
		List<QrTicket> list = null;
		try {
			// 返回查询结果
			list = qrService.searchAll(para);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("list", list);
			map.put("count", list.size());
			return new RestResult(map);
		} catch (AppException e) {
			// 返回异常信息
			return new RestResult(maHelper.mesg_error_0001);
		}

	}

}
